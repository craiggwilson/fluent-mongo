<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MongoDB.Driver</name>
    </assembly>
    <members>
        <member name="T:MongoDB.Driver.MongoDefaults">
            <summary>
            Default values for various Mongo settings.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.AssignIdOnInsert">
            <summary>
            Gets or sets whether the driver should assign a value to empty Ids on Insert.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.ComputedWaitQueueSize">
            <summary>
            Gets the actual wait queue size (either WaitQueueSize or WaitQueueMultiple x MaxConnectionPoolSize).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.ConnectTimeout">
            <summary>
            Gets or sets the connect timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.GuidRepresentation">
            <summary>
            Gets or sets the representation to use for Guids (this is an alias for BsonDefaults.GuidRepresentation).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.MaxConnectionIdleTime">
            <summary>
            Gets or sets the max connection idle time.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.MaxConnectionLifeTime">
            <summary>
            Gets or sets the max connection life time.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.MaxConnectionPoolSize">
            <summary>
            Gets or sets the max connection pool size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.MaxDocumentSize">
            <summary>
            Gets or sets the max document size (this is an alias for BsonDefaults.MaxDocumentSize).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.MaxMessageLength">
            <summary>
            Gets or sets the max message length.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.MinConnectionPoolSize">
            <summary>
            Gets or sets the min connection pool size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.SafeMode">
            <summary>
            Gets or sets the safe mode.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.SocketTimeout">
            <summary>
            Gets or sets the socket timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.TcpReceiveBufferSize">
            <summary>
            Gets or sets the TCP receive buffer size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.TcpSendBufferSize">
            <summary>
            Gets or sets the TCP send buffer size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.WaitQueueMultiple">
            <summary>
            Gets or sets the wait queue multiple (the actual wait queue size will be WaitQueueMultiple x MaxConnectionPoolSize, see also WaitQueueSize).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.WaitQueueSize">
            <summary>
            Gets or sets the wait queue size (see also WaitQueueMultiple).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDefaults.WaitQueueTimeout">
            <summary>
            Gets or sets the wait queue timeout.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GridFS.MongoGridFSFileInfo">
            <summary>
            Represents information about a GridFS file (patterned after .NET's FileInfo class).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.#ctor(MongoDB.Driver.GridFS.MongoGridFS,System.String)">
            <summary>
            Initializes a new instance of the GridFSFileInfo class.
            </summary>
            <param name="gridFS">The GridFS file system that contains the GridFS file.</param>
            <param name="remoteFileName">The remote file name.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.#ctor(MongoDB.Driver.GridFS.MongoGridFS,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the GridFSFileInfo class.
            </summary>
            <param name="gridFS">The GridFS file system that contains the GridFS file.</param>
            <param name="remoteFileName">The remote file name.</param>
            <param name="chunkSize">The chunk size.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.#ctor(MongoDB.Driver.GridFS.MongoGridFS,System.String,MongoDB.Driver.GridFS.MongoGridFSCreateOptions)">
            <summary>
            Initializes a new instance of the GridFSFileInfo class.
            </summary>
            <param name="gridFS">The GridFS file system that contains the GridFS file.</param>
            <param name="remoteFileName">The remote file name.</param>
            <param name="createOptions">The create options.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.op_Inequality(MongoDB.Driver.GridFS.MongoGridFSFileInfo,MongoDB.Driver.GridFS.MongoGridFSFileInfo)">
            <summary>
            Compares two MongoGridFSFileInfos.
            </summary>
            <param name="lhs">The first MongoGridFSFileInfo.</param>
            <param name="rhs">The other MongoGridFSFileInfo.</param>
            <returns>True if the two MongoGridFSFileInfos are not equal (or one is null and the other is not).</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.op_Equality(MongoDB.Driver.GridFS.MongoGridFSFileInfo,MongoDB.Driver.GridFS.MongoGridFSFileInfo)">
            <summary>
            Compares two MongoGridFSFileInfos.
            </summary>
            <param name="lhs">The first MongoGridFSFileInfo.</param>
            <param name="rhs">The other MongoGridFSFileInfo.</param>
            <returns>True if the two MongoGridFSFileInfos are equal (or both null).</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.AppendText">
            <summary>
            Appends UTF-8 encoded text to an existing GridFS file.
            </summary>
            <returns>A StreamWriter.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.CopyTo(System.String)">
            <summary>
            Copies a GridFS file.
            </summary>
            <param name="destFileName">The destination file name.</param>
            <returns>The file info of the new GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.CopyTo(System.String,MongoDB.Driver.GridFS.MongoGridFSCreateOptions)">
            <summary>
            Copies a GridFS file.
            </summary>
            <param name="destFileName">The destination file name.</param>
            <param name="createOptions">The create options.</param>
            <returns>The file info of the new GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Create">
            <summary>
            Creates or overwrites a GridFS file.
            </summary>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.CreateText">
            <summary>
            Creates or opens a GridFS file for writing UTF-8 encoded text.
            </summary>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Delete">
            <summary>
            Deletes a GridFS file.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Equals(MongoDB.Driver.GridFS.MongoGridFSFileInfo)">
            <summary>
            Compares this MongoGridFSFileInfo to another MongoGridFSFileInfo.
            </summary>
            <param name="rhs">The other MongoGridFSFileInfo.</param>
            <returns>True if the two MongoGridFSFileInfos are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Equals(System.Object)">
            <summary>
            Compares this MongoGridFSFileInfo to another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other object is a MongoGridFSFileInfo and equal to this one.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.MoveTo(System.String)">
            <summary>
            Moves the most recent version of a GridFS file.
            </summary>
            <param name="destFileName">The destination file name.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens a GridFS file with the specified mode.
            </summary>
            <param name="mode">The mode.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a GridFS file with the specified mode and access.
            </summary>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.OpenRead">
            <summary>
            Opens an existing GridFS file for reading.
            </summary>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.OpenText">
            <summary>
            Opens an existing UTF-8 encoded text GridFS file for reading.
            </summary>
            <returns>A stream reader.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.OpenWrite">
            <summary>
            Opens an existing GridFS file for writing.
            </summary>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Refresh">
            <summary>
            Refreshes the GridFS file info from the server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Aliases">
            <summary>
            Gets the aliases.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.ChunkSize">
            <summary>
            Gets the chunk size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.ContentType">
            <summary>
            Gets the content type.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Exists">
            <summary>
            Gets whether the GridFS file exists.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.GridFS">
            <summary>
            Gets the GridFS file system that contains this GridFS file.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Id">
            <summary>
            Gets the GridFS file Id.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Length">
            <summary>
            Gets the file lenth.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.MD5">
            <summary>
            Gets the MD5 hash of the file contents.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Metadata">
            <summary>
            Gets the metadata.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.Name">
            <summary>
            Gets the remote file name.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSFileInfo.UploadDate">
            <summary>
            Gets the upload date.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GridFS.MongoGridFS">
            <summary>
            Represents a GridFS file system.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.#ctor(MongoDB.Driver.MongoDatabase)">
            <summary>
            Initializes a new instance of the MongoGridFS class.
            </summary>
            <param name="database">The database containing the GridFS collections.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.#ctor(MongoDB.Driver.MongoDatabase,MongoDB.Driver.GridFS.MongoGridFSSettings)">
            <summary>
            Initializes a new instance of the MongoGridFS class.
            </summary>
            <param name="database">The database containing the GridFS collections.</param>
            <param name="settings">The GridFS settings.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.AppendText(System.String)">
            <summary>
            Appends UTF-8 encoded text to an existing GridFS file.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <returns>A StreamWriter.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.CopyTo(System.String,System.String)">
            <summary>
            Copies a GridFS file.
            </summary>
            <param name="sourceFileName">The source file name.</param>
            <param name="destFileName">The destination file name.</param>
            <returns>The file info of the new GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.CopyTo(System.String,System.String,MongoDB.Driver.GridFS.MongoGridFSCreateOptions)">
            <summary>
            Copies a GridFS file.
            </summary>
            <param name="sourceFileName">The source file name.</param>
            <param name="destFileName">The destination file name.</param>
            <param name="createOptions">The create options.</param>
            <returns>The file info of the new GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Create(System.String)">
            <summary>
            Creates or overwrites a GridFS file.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Create(System.String,MongoDB.Driver.GridFS.MongoGridFSCreateOptions)">
            <summary>
            Creates or overwrites a GridFS file.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <param name="createOptions">The create options.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.CreateText(System.String)">
            <summary>
            Creates or opens a GridFS file for writing UTF-8 encoded text.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <returns>A stream writer.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.CreateText(System.String,MongoDB.Driver.GridFS.MongoGridFSCreateOptions)">
            <summary>
            Creates or opens a GridFS file for writing UTF-8 encoded text.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <param name="createOptions">The create options.</param>
            <returns>A stream writer.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Delete(MongoDB.Driver.IMongoQuery)">
            <summary>
            Deletes GridFS files.
            </summary>
            <param name="query">A query that specifies the GridFS files to delete.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Delete(System.String)">
            <summary>
            Deletes all versions of a GridFS file.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.DeleteById(MongoDB.Bson.BsonValue)">
            <summary>
            Deletes a GridFS file.
            </summary>
            <param name="id">The GridFS file Id.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.IO.Stream,MongoDB.Driver.IMongoQuery)">
            <summary>
            Downloads the most recent version of a GridFS file.
            </summary>
            <param name="stream">The destination stream.</param>
            <param name="query">The GridFS file.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.IO.Stream,MongoDB.Driver.IMongoQuery,System.Int32)">
            <summary>
            Downloads a specific version of a GridFS file.
            </summary>
            <param name="stream">The destination stream.</param>
            <param name="query">The GridFS file.</param>
            <param name="version">The version to download.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.IO.Stream,MongoDB.Driver.GridFS.MongoGridFSFileInfo)">
            <summary>
            Downloads a GridFS file.
            </summary>
            <param name="stream">The destination stream.</param>
            <param name="fileInfo">The GridFS file.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.IO.Stream,System.String)">
            <summary>
            Downloads the most recent version of a GridFS file.
            </summary>
            <param name="stream">The destination stream.</param>
            <param name="remoteFileName">The remote file name.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.IO.Stream,System.String,System.Int32)">
            <summary>
            Downloads a specific version of a GridFS file.
            </summary>
            <param name="stream">The destination stream.</param>
            <param name="remoteFileName">The remote file name.</param>
            <param name="version">The version to download.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.String)">
            <summary>
            Downloads the most recent version of a GridFS file.
            </summary>
            <param name="fileName">The file name (same local and remote names).</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.String,System.Int32)">
            <summary>
            Downloads a specific version of a GridFS file.
            </summary>
            <param name="fileName">The file name (same local and remote names).</param>
            <param name="version">The version to download.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.String,MongoDB.Driver.IMongoQuery)">
            <summary>
            Downloads the most recent version of a GridFS file.
            </summary>
            <param name="localFileName">The local file name.</param>
            <param name="query">The GridFS file.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.String,MongoDB.Driver.IMongoQuery,System.Int32)">
            <summary>
            Downloads a specific version of a GridFS file.
            </summary>
            <param name="localFileName">The local file name.</param>
            <param name="query">The GridFS file.</param>
            <param name="version">The version to download.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.String,MongoDB.Driver.GridFS.MongoGridFSFileInfo)">
            <summary>
            Downloads a GridFS file.
            </summary>
            <param name="localFileName">The local file name.</param>
            <param name="fileInfo">The GridFS file.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.String,System.String)">
            <summary>
            Downloads the most recent version of a GridFS file.
            </summary>
            <param name="localFileName">The local file name.</param>
            <param name="remoteFileName">The remote file name.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Download(System.String,System.String,System.Int32)">
            <summary>
            Downloads a specific version of a GridFS file.
            </summary>
            <param name="localFileName">The local file name.</param>
            <param name="remoteFileName">The remote file name.</param>
            <param name="version">The version to download.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.EnsureIndexes">
            <summary>
            Ensures that the proper indexes for GridFS exist (only creates the new indexes if there are fewer than 1000 GridFS files).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.EnsureIndexes(System.Int32)">
            <summary>
            Ensures that the proper indexes for GridFS exist.
            </summary>
            <param name="maxFiles">Only create new indexes if there are fewer than this number of GridFS files).</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Exists(MongoDB.Driver.IMongoQuery)">
            <summary>
            Tests whether a GridFS file exists.
            </summary>
            <param name="query">The GridFS file.</param>
            <returns>True if the GridFS file exists.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Exists(System.String)">
            <summary>
            Tests whether a GridFS file exists.
            </summary>
            <param name="remoteFileName">The GridFS file.</param>
            <returns>True if the GridFS file exists.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.ExistsById(MongoDB.Bson.BsonValue)">
            <summary>
            Tests whether a GridFS file exists.
            </summary>
            <param name="id">The GridFS file.</param>
            <returns>True if the GridFS file exists.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Find(MongoDB.Driver.IMongoQuery)">
            <summary>
            Finds matching GridFS files.
            </summary>
            <param name="query">A query.</param>
            <returns>The matching GridFS files.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Find(System.String)">
            <summary>
            Finds matching GridFS files.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <returns>The matching GridFS files.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.FindAll">
            <summary>
            Finds all GridFS files.
            </summary>
            <returns>The matching GridFS files.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.FindOne(MongoDB.Driver.IMongoQuery)">
            <summary>
            Finds the most recent version of a GridFS file.
            </summary>
            <param name="query">The GridFS file.</param>
            <returns>The matching GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.FindOne(MongoDB.Driver.IMongoQuery,System.Int32)">
            <summary>
            Finds a specific version of a GridFS file.
            </summary>
            <param name="query">The GridFS file.</param>
            <param name="version">The version to find.</param>
            <returns>The matching GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.FindOne(System.String)">
            <summary>
            Finds the most recent version of a GridFS file.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <returns>The matching GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.FindOne(System.String,System.Int32)">
            <summary>
            Finds a specific version of a GridFS file.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <param name="version">The version to find.</param>
            <returns>The matching GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.FindOneById(MongoDB.Bson.BsonValue)">
            <summary>
            Finds a GridFS file.
            </summary>
            <param name="id">The GridFS file Id.</param>
            <returns>The GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.MoveTo(System.String,System.String)">
            <summary>
            Moves the most recent version of a GridFS file.
            </summary>
            <param name="sourceFileName">The source file name.</param>
            <param name="destFileName">The destination file name.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a GridFS file with the specified mode.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <param name="mode">The mode.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a GridFS file with the specified mode and access.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Open(System.String,System.IO.FileMode,System.IO.FileAccess,MongoDB.Driver.GridFS.MongoGridFSCreateOptions)">
            <summary>
            Opens a GridFS file with the specified mode, access and create options.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <param name="createOptions">The create options.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.OpenRead(System.String)">
            <summary>
            Opens an existing GridFS file for reading.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text GridFS file for reading.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <returns>A stream reader.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.OpenWrite(System.String)">
            <summary>
            Opens an existing GridFS file for writing.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.OpenWrite(System.String,MongoDB.Driver.GridFS.MongoGridFSCreateOptions)">
            <summary>
            Opens an existing GridFS file for writing.
            </summary>
            <param name="remoteFileName">The remote file name.</param>
            <param name="createOptions">The create options.</param>
            <returns>A stream.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.SetAliases(MongoDB.Driver.GridFS.MongoGridFSFileInfo,System.String[])">
            <summary>
            Sets the aliases for an existing GridFS file.
            </summary>
            <param name="fileInfo">The GridFS file.</param>
            <param name="aliases">The aliases.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.SetContentType(MongoDB.Driver.GridFS.MongoGridFSFileInfo,System.String)">
            <summary>
            Sets the content type for an existing GridFS file.
            </summary>
            <param name="fileInfo">The GridFS file.</param>
            <param name="contentType">The content type.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.SetMetadata(MongoDB.Driver.GridFS.MongoGridFSFileInfo,MongoDB.Bson.BsonValue)">
            <summary>
            Sets the metadata for an existing GridFS file.
            </summary>
            <param name="fileInfo">The GridFS file.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Upload(System.IO.Stream,System.String)">
            <summary>
            Uploads a GridFS file.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="remoteFileName">The remote file name.</param>
            <returns>The file info of the new GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Upload(System.IO.Stream,System.String,MongoDB.Driver.GridFS.MongoGridFSCreateOptions)">
            <summary>
            Uploads a GridFS file.
            </summary>
            <param name="stream">The source stream.</param>
            <param name="remoteFileName">The remote file name.</param>
            <param name="createOptions">The create options.</param>
            <returns>The file info of the new GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Upload(System.String)">
            <summary>
            Uploads a GridFS file.
            </summary>
            <param name="fileName">The file name (same local and remote names).</param>
            <returns>The file info of the new GridFS file.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFS.Upload(System.String,System.String)">
            <summary>
            Uploads a GridFS file.
            </summary>
            <param name="localFileName">The local file name.</param>
            <param name="remoteFileName">The remote file name.</param>
            <returns>The file info of the new GridFS file.</returns>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFS.Chunks">
            <summary>
            Gets the chunks collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFS.Database">
            <summary>
            Gets the database containing the GridFS collections.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFS.Files">
            <summary>
            Gets the files collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFS.Settings">
            <summary>
            Gets the GridFS settings.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GeoNearOptionsDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoGeoNearOptions is expected.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.IMongoGeoNearOptions">
            <summary>
            A marker interface that represents geo search options (see GeoNearOptionsDocument and the GeoNearOptions builder).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GeoNearOptionsDocument.#ctor">
            <summary>
            Initializes a new instance of the GeoNearOptionsDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GeoNearOptionsDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GeoNearOptionsDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.GeoNearOptionsDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the GeoNearOptionsDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.GeoNearOptionsDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the GeoNearOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.GeoNearOptionsDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the GeoNearOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.GeoNearOptionsDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the GeoNearOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.GeoNearOptionsDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the GeoNearOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.GeoNearOptionsDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the GeoNearOptionsDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.GeoNearOptionsDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the GeoNearOptionsDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.GeoNearOptionsDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the GeoNearOptionsDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.MongoCollectionSettings">
            <summary>
            The settings used to access a collection (an abstract class, see MongoCollectionSettings{TDefaultDocument}).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoCollectionSettings.Clone">
            <summary>
            Creates a clone of the settings.
            </summary>
            <returns>A clone of the settings.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollectionSettings.Equals(System.Object)">
            <summary>
            Compares two MongoCollectionSettings instances.
            </summary>
            <param name="obj">The other instance.</param>
            <returns>True if the two instances are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollectionSettings.Freeze">
            <summary>
            Freezes the settings to prevent any further changes to them.
            </summary>
            <returns>Itself.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollectionSettings.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollectionSettings.ToString">
            <summary>
            Returns a string representation of the settings.
            </summary>
            <returns>A string representation of the settings.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoCollectionSettings.AssignIdOnInsert">
            <summary>
            Gets or sets whether the driver should assign Id values when missing.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCollectionSettings.CollectionName">
            <summary>
            Gets the name of the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCollectionSettings.DefaultDocumentType">
            <summary>
            Gets the default document type of the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCollectionSettings.GuidRepresentation">
            <summary>
            Gets or sets the representation used for Guids.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCollectionSettings.IsFrozen">
            <summary>
            Gets whether the settings have been frozen to prevent further changes.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCollectionSettings.SafeMode">
            <summary>
            Gets or sets the SafeMode to use.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCollectionSettings.SlaveOk">
            <summary>
            Gets or sets whether queries should be sent to secondary servers.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoCollectionSettings`1">
            <summary>
            Settings used to access a collection.
            </summary>
            <typeparam name="TDefaultDocument">The default document type of the collection.</typeparam>
        </member>
        <member name="M:MongoDB.Driver.MongoCollectionSettings`1.#ctor(System.String,System.Boolean,MongoDB.Bson.GuidRepresentation,MongoDB.Driver.SafeMode,System.Boolean)">
            <summary>
            Creates a new instance of MongoCollectionSettings. Usually you would call MongoDatabase.CreateCollectionSettings instead.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <param name="assignIdOnInsert">Whether the driver should assign the Id values if necessary.</param>
            <param name="guidRepresentation">The representation for Guids.</param>
            <param name="safeMode">The safe mode to use.</param>
            <param name="slaveOk">Whether queries should be sent to secondary servers.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCollectionSettings`1.Clone">
            <summary>
            Creates a clone of the settings.
            </summary>
            <returns>A clone of the settings.</returns>
        </member>
        <member name="T:MongoDB.Driver.QueryFlags">
            <summary>
            Flags used with queries (see the SetQueryFlags method of MongoCursor).
            </summary>
        </member>
        <member name="F:MongoDB.Driver.QueryFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.QueryFlags.TailableCursor">
            <summary>
            This cursor should be tailable.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.QueryFlags.SlaveOk">
            <summary>
            It's OK for the query to be handled by a secondary server.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.QueryFlags.NoCursorTimeout">
            <summary>
            Tell the server not to let the cursor timeout.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.QueryFlags.AwaitData">
            <summary>
            Tell the server to wait for data to become available before returning (only used with TailableCursor).
            </summary>
        </member>
        <member name="F:MongoDB.Driver.QueryFlags.Exhaust">
            <summary>
            Tell the server to send all the data at once (in multiple messages if necessary) without waiting for GetMore messages.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.QueryFlags.Partial">
            <summary>
            Allow partial results in a sharded system if some of the shards are down.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Internal.IndexCache">
            <summary>
            Represents a cache of the names of indexes that are known to exist on a given server.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Internal.IndexCache.#ctor">
            <summary>
            Initializes a new instance of the IndexCache class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Internal.IndexCache.Add(MongoDB.Driver.MongoCollection,System.String)">
            <summary>
            Adds the name of an index to the cache.
            </summary>
            <param name="collection">The collection that contains the index.</param>
            <param name="indexName">The name of the index.</param>
        </member>
        <member name="M:MongoDB.Driver.Internal.IndexCache.Contains(MongoDB.Driver.MongoCollection,System.String)">
            <summary>
            Tests whether the cache contains the name of an index.
            </summary>
            <param name="collection">The collection that contains the index.</param>
            <param name="indexName">The name of the index.</param>
            <returns>True if the cache contains the named index.</returns>
        </member>
        <member name="M:MongoDB.Driver.Internal.IndexCache.Remove(MongoDB.Driver.MongoCollection,System.String)">
            <summary>
            Removes the name of an index from the cache.
            </summary>
            <param name="collection">The collection that contains the index.</param>
            <param name="indexName">The name of the index.</param>
        </member>
        <member name="M:MongoDB.Driver.Internal.IndexCache.Reset">
            <summary>
            Resets the cache.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Internal.IndexCache.Reset(MongoDB.Driver.MongoCollection)">
            <summary>
            Resets part of the cache by removing all indexes for a collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:MongoDB.Driver.Internal.IndexCache.Reset(MongoDB.Driver.MongoDatabase)">
            <summary>
            Resets part of the cache by removing all indexes for a database.
            </summary>
            <param name="database">The database.</param>
        </member>
        <member name="M:MongoDB.Driver.Internal.IndexCache.Reset(System.String)">
            <summary>
            Resets part of the cache by removing all indexes for a database.
            </summary>
            <param name="databaseName">The name of the database.</param>
        </member>
        <member name="M:MongoDB.Driver.Internal.IndexCache.Reset(System.String,System.String)">
            <summary>
            Resets part of the cache by removing all indexes for a collection.
            </summary>
            <param name="databaseName">The name of the database containing the collection.</param>
            <param name="collectionName">The name of the collection.</param>
        </member>
        <member name="T:MongoDB.Driver.GridFS.MongoGridFSCreateOptions">
            <summary>
            Represents options used when creating a GridFS file.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSCreateOptions.#ctor">
            <summary>
            Initializes a new instance of the MongoGridFSCreateOptions class.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSCreateOptions.Aliases">
            <summary>
            Gets or sets the aliases.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSCreateOptions.ChunkSize">
            <summary>
            Gets or sets the chunk size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSCreateOptions.ContentType">
            <summary>
            Gets or sets the content type.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSCreateOptions.Id">
            <summary>
            Gets or sets the file Id.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSCreateOptions.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSCreateOptions.UploadDate">
            <summary>
            Gets or sets the upload date.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.QueryWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoQuery is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.BaseWrapper">
            <summary>
            Abstract base class for wrapper classes.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.BaseWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the BaseWrapper class.
            </summary>
            <param name="obj">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.BaseWrapper.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the BaseWrapper class.
            </summary>
            <param name="nominalType">The nominal type of the wrapped object.</param>
            <param name="obj">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.BaseWrapper.Deserialize(MongoDB.Bson.IO.BsonReader,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Deserialize is an invalid operation for wrapper classes.
            </summary>
            <param name="bsonReader">Not applicable.</param>
            <param name="nominalType">Not applicable.</param>
            <param name="options">Not applicable.</param>
            <returns>Not applicable.</returns>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.BaseWrapper.GetDocumentId(System.Object@,System.Type@,MongoDB.Bson.Serialization.IIdGenerator@)">
            <summary>
            GetDocumentId is an invalid operation for wrapper classes.
            </summary>
            <param name="id">Not applicable.</param>
            <param name="idNominalType">Not applicable.</param>
            <param name="idGenerator">Not applicable.</param>
            <returns>Not applicable.</returns>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.BaseWrapper.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes a wrapped object to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type (ignored).</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.BaseWrapper.SetDocumentId(System.Object)">
            <summary>
            SetDocumentId is an invalid operation for wrapper classes.
            </summary>
            <returns>Not applicable.</returns>
        </member>
        <member name="T:MongoDB.Driver.IMongoQuery">
            <summary>
            A marker interface that represents a query (see QueryDocument and the Query builder).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.QueryWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the QueryWrapper class.
            </summary>
            <param name="query">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.QueryWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the QueryWrapper class.
            </summary>
            <param name="query">The wrapped object.</param>
            <returns>A new instance of QueryWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.IndexOptionsWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoIndexOptions is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="T:MongoDB.Driver.IMongoIndexOptions">
            <summary>
            A marker interface that represents options for creating an index (see IndexOptionsDocument and the IndexOptions builder).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.IndexOptionsWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the IndexOptionsWrapper class.
            </summary>
            <param name="options">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.IndexOptionsWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the IndexOptionsWrapper class.
            </summary>
            <param name="options">The wrapped object.</param>
            <returns>A new instance of IndexOptionsWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.Builders.Query">
            <summary>
            A builder for creating queries.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.All(System.String,MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $all test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.All(System.String,MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $all test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.And(MongoDB.Driver.IMongoQuery[])">
            <summary>
            Combines subqueries with an and operator.
            </summary>
            <param name="queries">The subqueries.</param>
            <returns>A query.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.ElemMatch(System.String,MongoDB.Driver.IMongoQuery)">
            <summary>
            Adds an $elemMatch test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="query">The query to match elements with.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.EQ(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds an equality test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="value">The value to compare to.</param>
            <returns>A query.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Exists(System.String,System.Boolean)">
            <summary>
            Adds a $exist test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="exists">Whether to test for the existence or absence of an element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.GT(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $gt test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.GTE(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $gte test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.In(System.String,MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $in test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.In(System.String,MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $in test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.LT(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $lt test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.LTE(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $lte test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Matches(System.String,MongoDB.Bson.BsonRegularExpression)">
            <summary>
            Adds a regular expression test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="regex">The regular expression to match against.</param>
            <returns>A query.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Mod(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a $mod test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="modulus">The modulus.</param>
            <param name="equals">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.NE(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $ne test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Near(System.String,System.Double,System.Double)">
            <summary>
            Adds a $near test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="x">The x value of the origin.</param>
            <param name="y">The y value of the origin.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Near(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds a $near test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="x">The x value of the origin.</param>
            <param name="y">The y value of the origin.</param>
            <param name="maxDistance">The max distance for a document to be included in the results.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Near(System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a $near or $nearSphere test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="x">The x value of the origin.</param>
            <param name="y">The y value of the origin.</param>
            <param name="maxDistance">The max distance for a document to be included in the results.</param>
            <param name="spherical">Whether to do a spherical search.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Nor(MongoDB.Driver.IMongoQuery[])">
            <summary>
            Combines subqueries with a nor operator.
            </summary>
            <param name="queries">The subqueries.</param>
            <returns>A query.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.NotIn(System.String,MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $nin test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.NotIn(System.String,MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $nin test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Not(System.String)">
            <summary>
            Adds a $not test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Or(MongoDB.Driver.IMongoQuery[])">
            <summary>
            Combines subqueries with an or operator.
            </summary>
            <param name="queries">The subqueries.</param>
            <returns>A query.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Size(System.String,System.Int32)">
            <summary>
            Adds a $size test to the query.
            </summary>
            <param name="name">The name of the array element to test.</param>
            <param name="size">The size of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Type(System.String,MongoDB.Bson.BsonType)">
            <summary>
            Adds a $type test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="type">The type.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.Where(MongoDB.Bson.BsonJavaScript)">
            <summary>
            Adds a $where test to the query.
            </summary>
            <param name="javaScript">The where clause.</param>
            <returns>A query.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.WithinCircle(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Adds a $within/$center test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="centerX">The x coordinate of the origin.</param>
            <param name="centerY">The y coordinate of the origin.</param>
            <param name="radius">The radius of the circle.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.WithinCircle(System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a $within/$center or $within/$centerSphere test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="centerX">The x coordinate of the origin.</param>
            <param name="centerY">The y coordinate of the origin.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="spherical">Whether to do a spherical search.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Query.WithinRectangle(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a $within/$box test to the query.
            </summary>
            <param name="name">The name of the element to test.</param>
            <param name="lowerLeftX">The x coordinate of the lower left corner.</param>
            <param name="lowerLeftY">The y coordinate of the lower left corner.</param>
            <param name="upperRightX">The x coordinate of the upper right corner.</param>
            <param name="upperRightY">The y coordinate of the upper right corner.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="P:MongoDB.Driver.Builders.Query.Null">
            <summary>
            Gets a null value with a type of IMongoQuery.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.QueryBuilder">
            <summary>
            A builder for creating queries.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.BuilderBase">
            <summary>
            Abstract base class for the builders.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.BuilderBase.#ctor">
            <summary>
            Initializes a new instance of the BuilderBase class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.BuilderBase.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.BuilderBase.ToString">
            <summary>
            Returns a string representation of the settings.
            </summary>
            <returns>A string representation of the settings.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.BuilderBase.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryBuilder.#ctor(MongoDB.Bson.BsonDocument)">
            <summary>
            Initializes a new instance of the QueryBuilder class.
            </summary>
            <param name="document">A document representing the query.</param>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryBuilder.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryBuilder.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="T:MongoDB.Driver.Builders.QueryComplete">
            <summary>
            A builder for creating queries.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryComplete.#ctor(MongoDB.Bson.BsonDocument)">
            <summary>
            Initializes a new instance of the QueryComplete class.
            </summary>
            <param name="document">A document representing the query.</param>
        </member>
        <member name="T:MongoDB.Driver.Builders.QueryConditionList">
            <summary>
            A builder for creating queries.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the QueryConditionList class.
            </summary>
            <param name="name">The name of the element to be tested.</param>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.All(MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $all test to the query.
            </summary>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.All(MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $all test to the query.
            </summary>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.ElemMatch(MongoDB.Driver.IMongoQuery)">
            <summary>
            Adds an $elemMatch test to the query.
            </summary>
            <param name="query">The query to match elements with.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.Exists(System.Boolean)">
            <summary>
            Adds a $exist test to the query.
            </summary>
            <param name="exists">Whether to test for the existence or absence of an element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.GT(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $gt test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.GTE(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $gte test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.In(MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $in test to the query.
            </summary>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.In(MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $in test to the query.
            </summary>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.LT(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $lt test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.LTE(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $lte test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.Mod(System.Int32,System.Int32)">
            <summary>
            Adds a $mod test to the query.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="equals">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.NE(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $ne test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.Near(System.Double,System.Double)">
            <summary>
            Adds a $near test to the query.
            </summary>
            <param name="x">The x value of the origin.</param>
            <param name="y">The y value of the origin.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.Near(System.Double,System.Double,System.Double)">
            <summary>
            Adds a $near test to the query.
            </summary>
            <param name="x">The x value of the origin.</param>
            <param name="y">The y value of the origin.</param>
            <param name="maxDistance">The max distance for a document to be included in the results.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.Near(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a $near or $nearSphere test to the query.
            </summary>
            <param name="x">The x value of the origin.</param>
            <param name="y">The y value of the origin.</param>
            <param name="maxDistance">The max distance for a document to be included in the results.</param>
            <param name="spherical">Whether to do a spherical search.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.NotIn(MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $nin test to the query.
            </summary>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.NotIn(MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $nin test to the query.
            </summary>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.Size(System.Int32)">
            <summary>
            Adds a $size test to the query.
            </summary>
            <param name="size">The size of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.Type(MongoDB.Bson.BsonType)">
            <summary>
            Adds a $type test to the query.
            </summary>
            <param name="type">The type.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.WithinCircle(System.Double,System.Double,System.Double)">
            <summary>
            Adds a $within/$center test to the query.
            </summary>
            <param name="x">The x coordinate of the origin.</param>
            <param name="y">The y coordinate of the origin.</param>
            <param name="radius">The radius of the circle.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.WithinCircle(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds a $within/$center or $within/$centerSphere test to the query.
            </summary>
            <param name="x">The x coordinate of the origin.</param>
            <param name="y">The y coordinate of the origin.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="spherical">Whether to do a spherical search.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryConditionList.WithinRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a $within/$box test to the query.
            </summary>
            <param name="lowerLeftX">The x coordinate of the lower left corner.</param>
            <param name="lowerLeftY">The y coordinate of the lower left corner.</param>
            <param name="upperRightX">The x coordinate of the upper right corner.</param>
            <param name="upperRightY">The y coordinate of the upper right corner.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="T:MongoDB.Driver.Builders.QueryNot">
            <summary>
            A builder for creating queries.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.#ctor(System.String)">
            <summary>
            Initializes a new instance of the QueryNot class.
            </summary>
            <param name="name">The name of the element to be tested.</param>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.All(MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $all test to the query.
            </summary>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.All(MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $all test to the query.
            </summary>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.ElemMatch(MongoDB.Driver.IMongoQuery)">
            <summary>
            Adds an $elemMatch test to the query.
            </summary>
            <param name="query">The query to match elements with.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.Exists(System.Boolean)">
            <summary>
            Adds a $exist test to the query.
            </summary>
            <param name="exists">Whether to test for the existence or absence of an element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.GT(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $gt test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.GTE(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $gte test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.In(MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $in test to the query.
            </summary>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.In(MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $in test to the query.
            </summary>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.LT(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $lt test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.LTE(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $lte test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.Mod(System.Int32,System.Int32)">
            <summary>
            Adds a $mod test to the query.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="equals">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.NE(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $ne test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.NotIn(MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $nin test to the query.
            </summary>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.NotIn(MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $nin test to the query.
            </summary>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.Matches(MongoDB.Bson.BsonRegularExpression)">
            <summary>
            Adds a regular expression test to the query.
            </summary>
            <param name="regex">The regular expression to match against.</param>
            <returns>A query.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.Size(System.Int32)">
            <summary>
            Adds a $size test to the query.
            </summary>
            <param name="size">The size of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNot.Type(MongoDB.Bson.BsonType)">
            <summary>
            Adds a $type test to the query.
            </summary>
            <param name="type">The type.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="T:MongoDB.Driver.Builders.QueryNotConditionList">
            <summary>
            A builder for creating queries.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the QueryNotConditionList.
            </summary>
            <param name="name">The name of the first element to be tested.</param>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.All(MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $all test to the query.
            </summary>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.All(MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $all test to the query.
            </summary>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.ElemMatch(MongoDB.Driver.IMongoQuery)">
            <summary>
            Adds an $elemMatch test to the query.
            </summary>
            <param name="query">The query to match elements with.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.Exists(System.Boolean)">
            <summary>
            Adds a $exist test to the query.
            </summary>
            <param name="exists">Whether to test for the existence or absence of an element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.GT(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $gt test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.GTE(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $gte test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.In(MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $in test to the query.
            </summary>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.In(MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $in test to the query.
            </summary>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.LT(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $lt test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.LTE(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $lte test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.Mod(System.Int32,System.Int32)">
            <summary>
            Adds a $mod test to the query.
            </summary>
            <param name="modulus">The modulus.</param>
            <param name="equals">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.NE(MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $ne test to the query.
            </summary>
            <param name="value">The value to compare to.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.NotIn(MongoDB.Bson.BsonArray)">
            <summary>
            Adds a $nin test to the query.
            </summary>
            <param name="values">A BsonArray of values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.NotIn(MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $nin test to the query.
            </summary>
            <param name="values">One or more BsonValues.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.Size(System.Int32)">
            <summary>
            Adds a $size test to the query.
            </summary>
            <param name="size">The size of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.QueryNotConditionList.Type(MongoDB.Bson.BsonType)">
            <summary>
            Adds a $type test to the query.
            </summary>
            <param name="type">The type.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="T:MongoDB.Driver.UpdateFlags">
            <summary>
            Flags used with the Update method in MongoCollection.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.UpdateFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.UpdateFlags.Upsert">
            <summary>
            If document doesn't exist then do an Insert.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.UpdateFlags.Multi">
            <summary>
            Update all matching documents (instead of just one).
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MapReduceResult">
            <summary>
            Represents the result of a map/reduce command.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.CommandResult">
            <summary>
            Represents the result of a command (there are also subclasses for various commands).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.CommandResult.#ctor">
            <summary>
            Initializes a new instance of the CommandResult class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.CommandResult.#ctor(MongoDB.Driver.IMongoCommand,MongoDB.Bson.BsonDocument)">
            <summary>
            Initializes a new instance of the CommandResult class.
            </summary>
            <param name="command">The command.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:MongoDB.Driver.CommandResult.Initialize(MongoDB.Driver.IMongoCommand,MongoDB.Bson.BsonDocument)">
            <summary>
            Initializes an existing instance of the CommandResult class.
            </summary>
            <param name="command">The command.</param>
            <param name="response">The response.</param>
        </member>
        <member name="P:MongoDB.Driver.CommandResult.Command">
            <summary>
            Gets the command.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CommandResult.CommandName">
            <summary>
            Gets the command name.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CommandResult.Response">
            <summary>
            Gets the response.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CommandResult.ErrorMessage">
            <summary>
            Gets the error message (null if none).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CommandResult.Ok">
            <summary>
            Gets the Ok value from the response.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MapReduceResult.#ctor">
            <summary>
            Initializes a new instance of the MapReduceResult class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MapReduceResult.GetInlineResultsAs``1">
            <summary>
            Gets the inline results as TDocuments.
            </summary>
            <typeparam name="TDocument">The type of the documents.</typeparam>
            <returns>The documents.</returns>
        </member>
        <member name="M:MongoDB.Driver.MapReduceResult.GetInlineResultsAs(System.Type)">
            <summary>
            Gets the inline results as TDocuments.
            </summary>
            <param name="documentType">The type of the documents.</param>
            <returns>The documents.</returns>
        </member>
        <member name="M:MongoDB.Driver.MapReduceResult.GetResults">
            <summary>
            Gets the results (either inline or fetched from the output collection).
            </summary>
            <returns>The documents.</returns>
        </member>
        <member name="M:MongoDB.Driver.MapReduceResult.GetResultsAs``1">
            <summary>
            Gets the results as TDocuments (either inline or fetched from the output collection).
            </summary>
            <typeparam name="TDocument">The type of the documents.</typeparam>
            <returns>The documents.</returns>
        </member>
        <member name="M:MongoDB.Driver.MapReduceResult.GetResultsAs(System.Type)">
            <summary>
            Gets the results as TDocuments (either inline or fetched from the output collection).
            </summary>
            <param name="documentType">The type of the documents.</param>
            <returns>The documents.</returns>
        </member>
        <member name="P:MongoDB.Driver.MapReduceResult.CollectionName">
            <summary>
            Gets the output collection name (null if none).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MapReduceResult.DatabaseName">
            <summary>
            Gets the output database name (null if none).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MapReduceResult.Duration">
            <summary>
            Gets the duration.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MapReduceResult.EmitCount">
            <summary>
            Gets the emit count.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MapReduceResult.OutputCount">
            <summary>
            Gets the output count.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MapReduceResult.InlineResults">
            <summary>
            Gets the inline results.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MapReduceResult.InputCount">
            <summary>
            Gets the input count.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GridFS.MongoGridFSException">
            <summary>
            Represents a MongoDB GridFS exception.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoException">
            <summary>
            Represents a MongoDB exception.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MongoException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MongoException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MongoException class (this overload supports deserialization).
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MongoGridFSException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MongoGridFSException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MongoGridFSException class (this overload supports deserialization).
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:MongoDB.Driver.MapReduceOptionsDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoMapReduceOptions is expected.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.IMongoMapReduceOptions">
            <summary>
            A marker interface that represents options for a map/reduce operation (see MapReduceOptionsDocument and the MapReduceOptions builder).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MapReduceOptionsDocument.#ctor">
            <summary>
            Initializes a new instance of the MapReduceOptionsDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MapReduceOptionsDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MapReduceOptionsDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.MapReduceOptionsDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the MapReduceOptionsDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.MapReduceOptionsDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the MapReduceOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.MapReduceOptionsDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the MapReduceOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.MapReduceOptionsDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the MapReduceOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.MapReduceOptionsDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the MapReduceOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.MapReduceOptionsDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the MapReduceOptionsDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.MapReduceOptionsDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the MapReduceOptionsDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.MapReduceOptionsDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the MapReduceOptionsDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.CommandDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoCommand is expected.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.QueryDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoQuery is expected.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.QueryDocument.#ctor">
            <summary>
            Initializes a new instance of the QueryDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.QueryDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the QueryDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.QueryDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the QueryDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.QueryDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the QueryDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.QueryDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the QueryDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.QueryDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the QueryDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.QueryDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the QueryDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.QueryDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the QueryDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.QueryDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the QueryDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.QueryDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the QueryDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.IMongoCommand">
            <summary>
            A marker interface that represents a command (see CommandDocument).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.CommandDocument.#ctor">
            <summary>
            Initializes a new instance of the CommandDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.CommandDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CommandDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.CommandDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the CommandDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.CommandDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the CommandDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.CommandDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the CommandDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.CommandDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the CommandDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.CommandDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the CommandDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.CommandDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the CommandDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.CommandDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the CommandDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.CommandDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the CommandDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.CollectionOptionsDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoCollectionOptions is expected.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.IMongoCollectionOptions">
            <summary>
            A marker interface that represents options for creating a collection (see CollectionOptionsDocument and the CollectionOptions builder).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.CollectionOptionsDocument.#ctor">
            <summary>
            Initializes a new instance of the CollectionOptionsDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.CollectionOptionsDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CollectionOptionsDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.CollectionOptionsDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the CollectionOptionsDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.CollectionOptionsDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the CollectionOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.CollectionOptionsDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the CollectionOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.CollectionOptionsDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the CollectionOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.CollectionOptionsDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the CollectionOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.CollectionOptionsDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the CollectionOptionsDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.CollectionOptionsDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the CollectionOptionsDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.CollectionOptionsDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the CollectionOptionsDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.MongoServerSettings">
            <summary>
            The settings used to access a MongoDB server.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServerSettings.#ctor">
            <summary>
            Creates a new instance of MongoServerSettings. Usually you would use a connection string instead.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServerSettings.#ctor(MongoDB.Driver.ConnectionMode,System.TimeSpan,MongoDB.Driver.MongoCredentials,MongoDB.Bson.GuidRepresentation,System.Boolean,System.TimeSpan,System.TimeSpan,System.Int32,System.Int32,System.String,MongoDB.Driver.SafeMode,System.Collections.Generic.IEnumerable{MongoDB.Driver.MongoServerAddress},System.Boolean,System.TimeSpan,System.Int32,System.TimeSpan)">
            <summary>
            Creates a new instance of MongoServerSettings. Usually you would use a connection string instead.
            </summary>
            <param name="connectionMode">The connection mode (Direct or ReplicaSet).</param>
            <param name="connectTimeout">The connect timeout.</param>
            <param name="defaultCredentials">The default credentials.</param>
            <param name="guidRepresentation">The representation for Guids.</param>
            <param name="ipv6">Whether to use IPv6.</param>
            <param name="maxConnectionIdleTime">The max connection idle time.</param>
            <param name="maxConnectionLifeTime">The max connection life time.</param>
            <param name="maxConnectionPoolSize">The max connection pool size.</param>
            <param name="minConnectionPoolSize">The min connection pool size.</param>
            <param name="replicaSetName">The name of the replica set.</param>
            <param name="safeMode">The safe mode.</param>
            <param name="servers">The server addresses (normally one unless it is the seed list for connecting to a replica set).</param>
            <param name="slaveOk">Whether queries should be sent to secondary servers.</param>
            <param name="socketTimeout">The socket timeout.</param>
            <param name="waitQueueSize">The wait queue size.</param>
            <param name="waitQueueTimeout">The wait queue timeout.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoServerSettings.Clone">
            <summary>
            Creates a clone of the settings.
            </summary>
            <returns>A clone of the settings.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerSettings.Equals(System.Object)">
            <summary>
            Compares two MongoServerSettings instances.
            </summary>
            <param name="obj">The other instance.</param>
            <returns>True if the two instances are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerSettings.Freeze">
            <summary>
            Freezes the settings to prevent any further changes to them.
            </summary>
            <returns>Itself.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerSettings.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerSettings.ToString">
            <summary>
            Returns a string representation of the settings.
            </summary>
            <returns>A string representation of the settings.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.AddressFamily">
            <summary>
            Gets the AddressFamily for the IPEndPoint (derived from the IPv6 setting).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.ConnectionMode">
            <summary>
            Gets or sets the connection mode.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.ConnectTimeout">
            <summary>
            Gets or sets the connect timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.DefaultCredentials">
            <summary>
            Gets or sets the default credentials.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.GuidRepresentation">
            <summary>
            Gets or sets the representation to use for Guids.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.IsFrozen">
            <summary>
            Gets whether the settings have been frozen to prevent further changes.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.IPv6">
            <summary>
            Gets or sets whether to use IPv6.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.MaxConnectionIdleTime">
            <summary>
            Gets or sets the max connection idle time.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.MaxConnectionLifeTime">
            <summary>
            Gets or sets the max connection life time.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.MaxConnectionPoolSize">
            <summary>
            Gets or sets the max connection pool size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.MinConnectionPoolSize">
            <summary>
            Gets or sets the min connection pool size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.ReplicaSetName">
            <summary>
            Gets or sets the name of the replica set.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.SafeMode">
            <summary>
            Gets or sets the SafeMode to use.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.Server">
            <summary>
            Gets or sets the address of the server (see also Servers if using more than one address).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.Servers">
            <summary>
            Gets or sets the list of server addresses (see also Server if using only one address).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.SlaveOk">
            <summary>
            Gets or sets whether queries should be sent to secondary servers.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.SocketTimeout">
            <summary>
            Gets or sets the socket timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.WaitQueueSize">
            <summary>
            Gets or sets the wait queue size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerSettings.WaitQueueTimeout">
            <summary>
            Gets or sets the wait queue timeout.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.Update">
            <summary>
            A builder for creating update modifiers.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.AddToSet(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds an $addToSet update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The value to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.AddToSetEach(System.String,System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonValue})">
            <summary>
            Adds an $addToSet/$each update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of values to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.AddToSetEach(System.String,MongoDB.Bson.BsonValue[])">
            <summary>
            Adds an $addToSet/$each update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more values to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.AddToSetEachWrapped``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an $addToSet/$each update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of wrapped values to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.AddToSetEachWrapped``1(System.String,``0[])">
            <summary>
            Adds an $addToSet/$each update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more wrapped values to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.AddToSetWrapped``1(System.String,``0)">
            <summary>
            Adds an $addToSet update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The wrapped value to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.BitwiseAnd(System.String,System.Int32)">
            <summary>
            Adds a bitwise and update modifier.
            </summary>
            <param name="name">The name of the element to be modified.</param>
            <param name="value">The value to be and-ed with the element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.BitwiseAnd(System.String,System.Int64)">
            <summary>
            Adds a bitwise and update modifier.
            </summary>
            <param name="name">The name of the element to be modified.</param>
            <param name="value">The value to be and-ed with the element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.BitwiseOr(System.String,System.Int32)">
            <summary>
            Adds a bitwise or update modifier.
            </summary>
            <param name="name">The name of the element to be modified.</param>
            <param name="value">The value to be or-ed with the element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.BitwiseOr(System.String,System.Int64)">
            <summary>
            Adds a bitwise or update modifier.
            </summary>
            <param name="name">The name of the element to be modified.</param>
            <param name="value">The value to be or-ed with the element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Inc(System.String,System.Double)">
            <summary>
            Adds a $inc update modifier.
            </summary>
            <param name="name">The name of the element to be incremented.</param>
            <param name="value">The value to increment by.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Inc(System.String,System.Int32)">
            <summary>
            Adds a $inc update modifier.
            </summary>
            <param name="name">The name of the element to be incremented.</param>
            <param name="value">The value to increment by.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Inc(System.String,System.Int64)">
            <summary>
            Adds a $inc update modifier.
            </summary>
            <param name="name">The name of the element to be incremented.</param>
            <param name="value">The value to increment by.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PopFirst(System.String)">
            <summary>
            Adds a $pop update modifier that removes the first element of an array.
            </summary>
            <param name="name">The name of the array element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PopLast(System.String)">
            <summary>
            Adds a $pop update modifier that removes the last element of an array.
            </summary>
            <param name="name">The name of the array element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Pull(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $pull update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The value to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Pull(System.String,MongoDB.Driver.IMongoQuery)">
            <summary>
            Adds a $pull update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="query">A query that specifies which elements to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PullAll(System.String,System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonValue})">
            <summary>
            Adds a $pullAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of values to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PullAll(System.String,MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $pullAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more values to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PullAllWrapped``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a $pullAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of wrapped values to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PullAllWrapped``1(System.String,``0[])">
            <summary>
            Adds a $pullAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more wrapped values to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PullWrapped``1(System.String,``0)">
            <summary>
            Adds a $pull update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The wrapped value to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Push(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $push update modifider.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The value to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PushAll(System.String,System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonValue})">
            <summary>
            Adds a $pushAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of values to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PushAll(System.String,MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $pushAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more values to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PushAllWrapped``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a $pushAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of wrapped values to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PushAllWrapped``1(System.String,``0[])">
            <summary>
            Adds a $pushAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more wrapped values to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.PushWrapped``1(System.String,``0)">
            <summary>
            Adds a $push update modifider.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The wrapped value to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Rename(System.String,System.String)">
            <summary>
            Adds a $rename update modifier.
            </summary>
            <param name="oldElementName">The name of the element to be renamed.</param>
            <param name="newElementName">The new name of the element.</param>
            <returns>An UpdateDocuemnt.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Replace``1(``0)">
            <summary>
            Adds a replacement document as the update modifier.
            </summary>
            <typeparam name="TNominalType">The nominal type of the replacement document</typeparam>
            <param name="document">The document.</param>
            <returns>An UpdateWrapper.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Replace(System.Type,System.Object)">
            <summary>
            Adds a replacement document as the update modifier.
            </summary>
            <param name="nominalType">The nominal type of the replacement document</param>
            <param name="document">The document.</param>
            <returns>An UpdateWrapper.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Set(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $set update modifier.
            </summary>
            <param name="name">The name of the element to be set.</param>
            <param name="value">The new value.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.SetWrapped``1(System.String,``0)">
            <summary>
            Adds a $set update modifier.
            </summary>
            <param name="name">The name of the element to be set.</param>
            <param name="value">The new wrapped value.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Update.Unset(System.String)">
            <summary>
            Adds an $unset update modifier.
            </summary>
            <param name="name">The name of the element to be removed.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="T:MongoDB.Driver.Builders.UpdateBuilder">
            <summary>
            A builder for creating update modifiers.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.IMongoUpdate">
            <summary>
            A marker interface that represents an update modifier (see UpdateDocument and the Update builder).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.#ctor">
            <summary>
            Initializes a new instance of the UpdateBuilder class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.AddToSet(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds an $addToSet update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The value to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.AddToSetEach(System.String,System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonValue})">
            <summary>
            Adds an $addToSet/$each update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of values to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.AddToSetEach(System.String,MongoDB.Bson.BsonValue[])">
            <summary>
            Adds an $addToSet/$each update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more values to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.AddToSetEachWrapped``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an $addToSet/$each update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of wrapped values to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.AddToSetEachWrapped``1(System.String,``0[])">
            <summary>
            Adds an $addToSet/$each update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more wrapped values to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.AddToSetWrapped``1(System.String,``0)">
            <summary>
            Adds an $addToSet update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The wrapped value to add to the set.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.BitwiseAnd(System.String,System.Int32)">
            <summary>
            Adds a bitwise and update modifier.
            </summary>
            <param name="name">The name of the element to be modified.</param>
            <param name="value">The value to be and-ed with the element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.BitwiseAnd(System.String,System.Int64)">
            <summary>
            Adds a bitwise and update modifier.
            </summary>
            <param name="name">The name of the element to be modified.</param>
            <param name="value">The value to be and-ed with the element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.BitwiseOr(System.String,System.Int32)">
            <summary>
            Adds a bitwise or update modifier.
            </summary>
            <param name="name">The name of the element to be modified.</param>
            <param name="value">The value to be or-ed with the element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.BitwiseOr(System.String,System.Int64)">
            <summary>
            Adds a bitwise or update modifier.
            </summary>
            <param name="name">The name of the element to be modified.</param>
            <param name="value">The value to be or-ed with the element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.Inc(System.String,System.Double)">
            <summary>
            Adds a $inc update modifier.
            </summary>
            <param name="name">The name of the element to be incremented.</param>
            <param name="value">The value to increment by.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.Inc(System.String,System.Int32)">
            <summary>
            Adds a $inc update modifier.
            </summary>
            <param name="name">The name of the element to be incremented.</param>
            <param name="value">The value to increment by.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.Inc(System.String,System.Int64)">
            <summary>
            Adds a $inc update modifier.
            </summary>
            <param name="name">The name of the element to be incremented.</param>
            <param name="value">The value to increment by.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PopFirst(System.String)">
            <summary>
            Adds a $pop update modifier that removes the first element of an array.
            </summary>
            <param name="name">The name of the array element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PopLast(System.String)">
            <summary>
            Adds a $pop update modifier that removes the last element of an array.
            </summary>
            <param name="name">The name of the array element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.Pull(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $pull update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The value to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.Pull(System.String,MongoDB.Driver.IMongoQuery)">
            <summary>
            Adds a $pull update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="query">A query that specifies which elements to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PullAll(System.String,System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonValue})">
            <summary>
            Adds a $pullAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of values to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PullAll(System.String,MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $pullAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more values to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PullAllWrapped``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a $pullAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of wrapped values to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PullAllWrapped``1(System.String,``0[])">
            <summary>
            Adds a $pullAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more wrapped values to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PullWrapped``1(System.String,``0)">
            <summary>
            Adds a $pull update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The wrapped value to remove.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.Push(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $push update modifider.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The value to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PushAll(System.String,System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonValue})">
            <summary>
            Adds a $pushAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of values to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PushAll(System.String,MongoDB.Bson.BsonValue[])">
            <summary>
            Adds a $pushAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more values to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PushAllWrapped``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a $pushAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">A list of wrapped values to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PushAllWrapped``1(System.String,``0[])">
            <summary>
            Adds a $pushAll update modifier.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="values">One or more wrapped values to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.PushWrapped``1(System.String,``0)">
            <summary>
            Adds a $push update modifider.
            </summary>
            <param name="name">The name of the array element.</param>
            <param name="value">The wrapped value to add to the end of the array.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.Rename(System.String,System.String)">
            <summary>
            Adds a $rename update modifider.
            </summary>
            <param name="oldElementName">The old element name.</param>
            <param name="newElementName">The new element name.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.Set(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Adds a $set update modifier.
            </summary>
            <param name="name">The name of the element to be set.</param>
            <param name="value">The new value.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.SetWrapped``1(System.String,``0)">
            <summary>
            Adds a $set update modifier.
            </summary>
            <param name="name">The name of the element to be set.</param>
            <param name="value">The new wrapped value.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.Unset(System.String)">
            <summary>
            Adds an $unset update modifier.
            </summary>
            <param name="name">The name of the element to be removed.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.UpdateBuilder.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="T:MongoDB.Driver.Builders.GroupBy">
            <summary>
            A builder for specifying what the GroupBy command should group by.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.GroupBy.Function(MongoDB.Bson.BsonJavaScript)">
            <summary>
            Sets a key function.
            </summary>
            <param name="keyFunction">The key function.</param>
            <returns>A BsonJavaScript.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.GroupBy.Keys(System.String[])">
            <summary>
            Sets one or more key names.
            </summary>
            <param name="names">One or more key names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="T:MongoDB.Driver.Builders.GroupByBuilder">
            <summary>
            A builder for specifying what the GroupBy command should group by.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.IMongoGroupBy">
            <summary>
            A marker interface that represents what to group by (see GroupByDocument and the GroupBy builder).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.GroupByBuilder.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the GroupByBuilder class.
            </summary>
            <param name="names">One or more key names.</param>
        </member>
        <member name="M:MongoDB.Driver.Builders.GroupByBuilder.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.GroupByBuilder.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="T:MongoDB.Driver.MongoServerAddress">
            <summary>
            The address of a MongoDB server.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of MongoServerAddress.
            </summary>
            <param name="host">The server's host name.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of MongoServerAddress.
            </summary>
            <param name="host">The server's host name.</param>
            <param name="port">The server's port number.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.Parse(System.String)">
            <summary>
            Parses a string representation of a server address.
            </summary>
            <param name="value">The string representation of a server address.</param>
            <returns>A new instance of MongoServerAddress initialized with values parsed from the string.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.TryParse(System.String,MongoDB.Driver.MongoServerAddress@)">
            <summary>
            Tries to parse a string representation of a server address.
            </summary>
            <param name="value">The string representation of a server address.</param>
            <param name="address">The server address (set to null if TryParse fails).</param>
            <returns>True if the string is parsed succesfully.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.op_Equality(MongoDB.Driver.MongoServerAddress,MongoDB.Driver.MongoServerAddress)">
            <summary>
            Compares two server addresses.
            </summary>
            <param name="lhs">The first address.</param>
            <param name="rhs">The other address.</param>
            <returns>True if the two addresses are equal (or both are null).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.op_Inequality(MongoDB.Driver.MongoServerAddress,MongoDB.Driver.MongoServerAddress)">
            <summary>
            Compares two server addresses.
            </summary>
            <param name="lhs">The first address.</param>
            <param name="rhs">The other address.</param>
            <returns>True if the two addresses are not equal (or one is null and the other is not).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.Equals(MongoDB.Driver.MongoServerAddress,MongoDB.Driver.MongoServerAddress)">
            <summary>
            Compares two server addresses.
            </summary>
            <param name="lhs">The first server address.</param>
            <param name="rhs">The other server address.</param>
            <returns>True if the two server addresses are equal (or both are null).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.Equals(MongoDB.Driver.MongoServerAddress)">
            <summary>
            Compares two server addresses.
            </summary>
            <param name="rhs">The other server address.</param>
            <returns>True if the two server addresses are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.Equals(System.Object)">
            <summary>
            Compares two server addresses.
            </summary>
            <param name="obj">The other server address.</param>
            <returns>True if the two server addresses are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.ToString">
            <summary>
            Returns a string representation of the server address.
            </summary>
            <returns>A string representation of the server address.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServerAddress.ToIPEndPoint(System.Net.Sockets.AddressFamily)">
            <summary>
            Returns the server address as an IPEndPoint (does a DNS lookup).
            </summary>
            <returns>The IPEndPoint of the server.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoServerAddress.Host">
            <summary>
            Gets the server's host name.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerAddress.Port">
            <summary>
            Gets the server's port number.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GridFS.MongoGridFSSettings">
            <summary>
            Represents setting for GridFS.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSSettings.#ctor">
            <summary>
            Initializes a new instance of the MongoGridFSSettings class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSSettings.#ctor(System.Int32,System.String,MongoDB.Driver.SafeMode)">
            <summary>
            Initializes a new instance of the MongoGridFSSettings class.
            </summary>
            <param name="chunkSize">The chunk size.</param>
            <param name="root">The root collection name.</param>
            <param name="safeMode">The safe mode.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSSettings.op_Inequality(MongoDB.Driver.GridFS.MongoGridFSSettings,MongoDB.Driver.GridFS.MongoGridFSSettings)">
            <summary>
            Compares two MongoGridFSSettings.
            </summary>
            <param name="lhs">The first MongoGridFSSettings.</param>
            <param name="rhs">The other MongoGridFSSettings.</param>
            <returns>True if the two MongoGridFSSettings are not equal (or one is null and the other is not).</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSSettings.op_Equality(MongoDB.Driver.GridFS.MongoGridFSSettings,MongoDB.Driver.GridFS.MongoGridFSSettings)">
            <summary>
            Compares two MongoGridFSSettingss.
            </summary>
            <param name="lhs">The first MongoGridFSSettings.</param>
            <param name="rhs">The other MongoGridFSSettings.</param>
            <returns>True if the two MongoGridFSSettings are equal (or both null).</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSSettings.Clone">
            <summary>
            Creates a clone of the settings.
            </summary>
            <returns>A clone of the settings.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSSettings.Equals(MongoDB.Driver.GridFS.MongoGridFSSettings)">
            <summary>
            Compares this MongoGridFSSettings to another one.
            </summary>
            <param name="rhs">The other MongoGridFSSettings.</param>
            <returns>True if the two settings are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSSettings.Equals(System.Object)">
            <summary>
            Compares this MongoGridFSSettings to another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if the other objects is a MongoGridFSSettings and is equal to this one.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSSettings.Freeze">
            <summary>
            Freezes the settings.
            </summary>
            <returns>The settings.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSSettings.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSSettings.Defaults">
            <summary>
            Gets or sets the default GridFS settings.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSSettings.ChunksCollectionName">
            <summary>
            Gets the chunks collection name.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSSettings.ChunkSize">
            <summary>
            Gets or sets the chunk size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSSettings.FilesCollectionName">
            <summary>
            Gets the files collection name.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSSettings.IsFrozen">
            <summary>
            Gets whether the settings are frozen.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSSettings.Root">
            <summary>
            Gets or sets the root collection name (the files and chunks collection names are derived from the root).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSSettings.SafeMode">
            <summary>
            Gets or sets the safe mode.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Internal.MongoConnectionPool">
            <summary>
            Represents a pool of connections to a MongoDB server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.Internal.MongoConnectionPool.AvailableConnectionsCount">
            <summary>
            Gets the number of available connections (connections that are open but not currently in use).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.Internal.MongoConnectionPool.CurrentPoolSize">
            <summary>
            Gets the number of connections in the connection pool (includes both available and in use connections).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.Internal.MongoConnectionPool.ServerInstance">
            <summary>
            Gets the server instance.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GeoNearResult">
            <summary>
            Represents the result of a GeoNear command.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult.#ctor">
            <summary>
            Initializes a new instance of the GeoNearResult class.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.Hits">
            <summary>
            Gets the hits.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.Stats">
            <summary>
            Gets the stats.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.HitsImplementation">
            <summary>
            Gets the hits.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GeoNearResult.GeoNearHits">
            <summary>
            Represents a collection of GeoNear hits.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult.GeoNearHits.#ctor">
            <summary>
            Initializes a new instance of the GeoNearHits class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult.GeoNearHits.GetEnumerator">
            <summary>
            Gets an enumerator for the hits.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult.GeoNearHits.GetEnumeratorImplementation">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult.GeoNearHits.GetHitImplementation(System.Int32)">
            <summary>
            Gets an individual hit.
            </summary>
            <param name="index">The zero based index of the hit.</param>
            <returns>The hit.</returns>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearHits.Count">
            <summary>
            Gets the count of the number of hits.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearHits.Item(System.Int32)">
            <summary>
            Gets an individual hit.
            </summary>
            <param name="index">The zero based index of the hit.</param>
            <returns>The hit.</returns>
        </member>
        <member name="T:MongoDB.Driver.GeoNearResult.GeoNearHit">
            <summary>
            Represents a GeoNear hit.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult.GeoNearHit.#ctor(MongoDB.Bson.BsonDocument)">
            <summary>
            Initializes a new instance of the GeoNearHit class.
            </summary>
            <param name="hit">The hit.</param>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearHit.Distance">
            <summary>
            Gets the distance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearHit.Document">
            <summary>
            Gets the document.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearHit.RawDocument">
            <summary>
            Gets the document as a BsonDocument.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearHit.DocumentImplementation">
            <summary>
            Gets the document.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GeoNearResult.GeoNearStats">
            <summary>
            Represents the stats of a GeoNear command.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult.GeoNearStats.#ctor(MongoDB.Bson.BsonDocument)">
            <summary>
            Initializes a new instance of the GeoNearStats class.
            </summary>
            <param name="stats">The stats.</param>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearStats.AverageDistance">
            <summary>
            Gets the average distance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearStats.BTreeLocations">
            <summary>
            Gets the count of b-tree locations.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearStats.Duration">
            <summary>
            Gets the duration.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearStats.MaxDistance">
            <summary>
            Gets the max distance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearStats.NumberScanned">
            <summary>
            Gets the number of documents scanned.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult.GeoNearStats.ObjectsLoaded">
            <summary>
            Gets the number of documents loaded.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GeoNearResult`1">
            <summary>
            Represents the result of a GeoNear command.
            </summary>
            <typeparam name="TDocument">The type of the returned documents.</typeparam>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult`1.#ctor">
            <summary>
            Initializes a new instance of the GeoNearResult class.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult`1.Hits">
            <summary>
            Gets the hits.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult`1.HitsImplementation">
            <summary>
            Gets the hits.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GeoNearResult`1.GeoNearHits">
            <summary>
            Represents a collection of GeoNear hits.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult`1.GeoNearHits.#ctor(MongoDB.Bson.BsonArray)">
            <summary>
            Initializes a new instance of the GeoNearHits class.
            </summary>
            <param name="hits">The hits.</param>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult`1.GeoNearHits.GetEnumerator">
            <summary>
            Gets an enumerator for the hits.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult`1.GeoNearHits.GetHitImplementation(System.Int32)">
            <summary>
            Gets a hit.
            </summary>
            <param name="index">The zero based index of the hit.</param>
            <returns>The hit.</returns>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult`1.GeoNearHits.GetEnumeratorImplementation">
            <summary>
            Gets an enumerator for the hits.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult`1.GeoNearHits.Count">
            <summary>
            Gets the count of the number of hits.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult`1.GeoNearHits.Item(System.Int32)">
            <summary>
            Gets an individual hit.
            </summary>
            <param name="index">The zero based index of the hit.</param>
            <returns>The hit.</returns>
        </member>
        <member name="T:MongoDB.Driver.GeoNearResult`1.GeoNearHit">
            <summary>
            Represents a GeoNear hit.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GeoNearResult`1.GeoNearHit.#ctor(MongoDB.Bson.BsonDocument)">
            <summary>
            Initializes a new instance of the GeoNearHit class.
            </summary>
            <param name="hit">The hit.</param>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult`1.GeoNearHit.Document">
            <summary>
            Gets the document.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GeoNearResult`1.GeoNearHit.DocumentImplementation">
            <summary>
            Gets the document.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.MapReduceOptionsWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoMapReduceOptions is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.MapReduceOptionsWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the MapReduceOptionsWrapper class.
            </summary>
            <param name="options">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.MapReduceOptionsWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the MapReduceOptionsWrapper class.
            </summary>
            <param name="options">The wrapped object.</param>
            <returns>A new instance of MapReduceOptionsWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.MongoDatabaseSettings">
            <summary>
            The settings used to access a database.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabaseSettings.#ctor(System.String,MongoDB.Driver.MongoCredentials,MongoDB.Bson.GuidRepresentation,MongoDB.Driver.SafeMode,System.Boolean)">
            <summary>
            Creates a new instance of MongoDatabaseSettings. Usually you would call MongoServer.CreateDatabaseSettings instead.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="credentials">The credentials to access the database.</param>
            <param name="guidRepresentation">The representation for Guids.</param>
            <param name="safeMode">The safe mode to use.</param>
            <param name="slaveOk">Whether queries should be sent to secondary servers.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabaseSettings.Clone">
            <summary>
            Creates a clone of the settings.
            </summary>
            <returns>A clone of the settings.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabaseSettings.Equals(System.Object)">
            <summary>
            Compares two MongoDatabaseSettings instances.
            </summary>
            <param name="obj">The other instance.</param>
            <returns>True if the two instances are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabaseSettings.Freeze">
            <summary>
            Freezes the settings to prevent any further changes to them.
            </summary>
            <returns>Itself.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabaseSettings.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabaseSettings.ToString">
            <summary>
            Returns a string representation of the settings.
            </summary>
            <returns>A string representation of the settings.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabaseSettings.Credentials">
            <summary>
            Gets or sets the credentials to access the database.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabaseSettings.DatabaseName">
            <summary>
            Gets the name of the database.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabaseSettings.GuidRepresentation">
            <summary>
            Gets or sets the representation to use for Guids.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabaseSettings.IsFrozen">
            <summary>
            Gets whether the settings have been frozen to prevent further changes.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabaseSettings.SafeMode">
            <summary>
            Gets or sets the SafeMode to use.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabaseSettings.SlaveOk">
            <summary>
            Gets or sets whether queries should be sent to secondary servers.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.IndexOptions">
            <summary>
            A builder for the options used when creating an index.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptions.SetBackground(System.Boolean)">
            <summary>
            Sets whether to build the index in the background.
            </summary>
            <param name="value">Whether to build the index in the background.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptions.SetDropDups(System.Boolean)">
            <summary>
            Sets whether duplicates should be dropped.
            </summary>
            <param name="value">Whether duplicates should be dropped.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptions.SetGeoSpatialRange(System.Double,System.Double)">
            <summary>
            Sets the geospatial range.
            </summary>
            <param name="min">The min value of the range.</param>
            <param name="max">The max value of the range.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptions.SetName(System.String)">
            <summary>
            Sets the name of the index.
            </summary>
            <param name="value">The name of the index.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptions.SetSparse(System.Boolean)">
            <summary>
            Sets whether the index is a sparse index.
            </summary>
            <param name="value">Whether the index is a sparse index.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptions.SetUnique(System.Boolean)">
            <summary>
            Sets whether the index enforces unique values.
            </summary>
            <param name="value">Whether the index enforces unique values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="P:MongoDB.Driver.Builders.IndexOptions.Null">
            <summary>
            Gets a null value with a type of IMongoIndexOptions.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.IndexOptionsBuilder">
            <summary>
            A builder for the options used when creating an index.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptionsBuilder.#ctor">
            <summary>
            Initializes a new instance of the IndexOptionsBuilder class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptionsBuilder.SetBackground(System.Boolean)">
            <summary>
            Sets whether to build the index in the background.
            </summary>
            <param name="value">Whether to build the index in the background.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptionsBuilder.SetDropDups(System.Boolean)">
            <summary>
            Sets whether duplicates should be dropped.
            </summary>
            <param name="value">Whether duplicates should be dropped.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptionsBuilder.SetGeoSpatialRange(System.Double,System.Double)">
            <summary>
            Sets the geospatial range.
            </summary>
            <param name="min">The min value of the range.</param>
            <param name="max">The max value of the range.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptionsBuilder.SetName(System.String)">
            <summary>
            Sets the name of the index.
            </summary>
            <param name="value">The name of the index.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptionsBuilder.SetSparse(System.Boolean)">
            <summary>
            Sets whether the index is a sparse index.
            </summary>
            <param name="value">Whether the index is a sparse index.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptionsBuilder.SetUnique(System.Boolean)">
            <summary>
            Sets whether the index enforces unique values.
            </summary>
            <param name="value">Whether the index enforces unique values.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptionsBuilder.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexOptionsBuilder.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="T:MongoDB.Driver.GridFS.MongoGridFSStream">
            <summary>
            Represents a stream interface to a GridFS file (patterned after .NET's Stream class).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSStream.#ctor(MongoDB.Driver.GridFS.MongoGridFSFileInfo,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the MongoGridFSStream class.
            </summary>
            <param name="fileInfo">The GridFS file info.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSStream.#ctor(MongoDB.Driver.GridFS.MongoGridFSFileInfo,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the MongoGridFSStream class.
            </summary>
            <param name="fileInfo">The GridFS file info.</param>
            <param name="mode">The mode.</param>
            <param name="access">The acess.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSStream.Flush">
            <summary>
            Flushes any unsaved data in the buffers to the GridFS file.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the GridFS stream.
            </summary>
            <param name="buffer">The destination buffer.</param>
            <param name="offset">The offset in the destination buffer at which to place the read bytes.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSStream.ReadByte">
            <summary>
            Reads one byte from the GridFS stream.
            </summary>
            <returns>The byte (-1 if at the end of the GridFS stream).</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks to a new position.
            </summary>
            <param name="offset">The seek offset.</param>
            <param name="origin">The seek origin.</param>
            <returns>The new position.</returns>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the GridFS file.
            </summary>
            <param name="value">The length.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the GridFS stream.
            </summary>
            <param name="buffer">The source buffer.</param>
            <param name="offset">The offset in the source buffer to the bytes.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the GridFS stream.
            </summary>
            <param name="value">The byte.</param>
        </member>
        <member name="M:MongoDB.Driver.GridFS.MongoGridFSStream.Dispose(System.Boolean)">
            <summary>
            Disposes of any resources used by the stream.
            </summary>
            <param name="disposing">True if called from Dispose.</param>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSStream.CanRead">
            <summary>
            Gets whether the GridFS stream supports reading.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSStream.CanSeek">
            <summary>
            Gets whether the GridFS stream supports seeking.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSStream.CanWrite">
            <summary>
            Gets whether the GridFS stream supports writing.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSStream.Length">
            <summary>
            Gets the current length (use SetLength to change the length).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSStream.Position">
            <summary>
            Gets or sets the current position.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GridFS.MongoGridFSStream.UpdateMD5">
            <summary>
            Gets or sets whether to compute and update the MD5 hash for the file when the stream is closed.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.IMongoScope">
            <summary>
            A marker interface that represents a scope (a set of variables with values, see ScopeDocument).
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoDatabase">
            <summary>
            Represents a MongoDB database and the settings used to access it. This class is thread-safe.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.#ctor(MongoDB.Driver.MongoServer,MongoDB.Driver.MongoDatabaseSettings)">
            <summary>
            Creates a new instance of MongoDatabase. Normally you would call one of the indexers or GetDatabase methods
            of MongoServer instead.
            </summary>
            <param name="server">The server that contains this database.</param>
            <param name="settings">The settings to use to access this database.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.Create(MongoDB.Driver.MongoConnectionStringBuilder)">
            <summary>
            Creates a new instance or returns an existing instance of MongoDatabase. Only one instance
            is created for each combination of database settings. Automatically creates an instance
            of MongoServer if needed.
            </summary>
            <param name="builder">Server and database settings in the form of a MongoConnectionStringBuilder.</param>
            <returns>
            A new or existing instance of MongoDatabase.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.Create(MongoDB.Driver.MongoServerSettings,System.String)">
            <summary>
            Creates a new instance or returns an existing instance of MongoDatabase. Only one instance
            is created for each combination of database settings. Automatically creates an instance
            of MongoServer if needed.
            </summary>
            <param name="serverSettings">The server settings for the server that contains this database.</param>
            <param name="databaseName">The name of this database (will be accessed using default settings).</param>
            <returns>
            A new or existing instance of MongoDatabase.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.Create(MongoDB.Driver.MongoUrl)">
            <summary>
            Creates a new instance or returns an existing instance of MongoDatabase. Only one instance
            is created for each combination of database settings. Automatically creates an instance
            of MongoServer if needed.
            </summary>
            <param name="url">Server and database settings in the form of a MongoUrl.</param>
            <returns>
            A new or existing instance of MongoDatabase.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.Create(System.String)">
            <summary>
            Creates a new instance or returns an existing instance of MongoDatabase. Only one instance
            is created for each combination of database settings. Automatically creates an instance
            of MongoServer if needed.
            </summary>
            <param name="connectionString">Server and database settings in the form of a connection string.</param>
            <returns>
            A new or existing instance of MongoDatabase.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.Create(System.Uri)">
            <summary>
            Creates a new instance or returns an existing instance of MongoDatabase. Only one instance
            is created for each combination of database settings. Automatically creates an instance
            of MongoServer if needed.
            </summary>
            <param name="uri">Server and database settings in the form of a Uri.</param>
            <returns>
            A new or existing instance of MongoDatabase.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.AddUser(MongoDB.Driver.MongoCredentials)">
            <summary>
            Adds a user to this database.
            </summary>
            <param name="credentials">The user's credentials.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.AddUser(MongoDB.Driver.MongoCredentials,System.Boolean)">
            <summary>
            Adds a user to this database.
            </summary>
            <param name="credentials">The user's credentials.</param>
            <param name="readOnly">True if the user is a read-only user.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.AddUser(MongoDB.Driver.MongoUser)">
            <summary>
            Adds a user to this database.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.CollectionExists(System.String)">
            <summary>
            Tests whether a collection exists on this database.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <returns>True if the collection exists.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.CreateCollection(System.String)">
            <summary>
            Creates a collection. MongoDB creates collections automatically when they are first used, so
            this command is mainly here for frameworks.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <returns>A CommandResult.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.CreateCollection(System.String,MongoDB.Driver.IMongoCollectionOptions)">
            <summary>
            Creates a collection. MongoDB creates collections automatically when they are first used, so
            you only need to call this method if you want to provide non-default options.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <param name="options">Options for creating this collection (usually a CollectionOptionsDocument or constructed using the CollectionOptions builder).</param>
            <returns>A CommandResult.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.CreateCollectionSettings``1(System.String)">
            <summary>
            Creates an instance of MongoCollectionSettings for the named collection with the rest of the settings inherited.
            You can override some of these settings before calling GetCollection.
            </summary>
            <typeparam name="TDefaultDocument">The default document type for this collection.</typeparam>
            <param name="collectionName">The name of this collection.</param>
            <returns>A MongoCollectionSettings.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.CreateCollectionSettings(System.Type,System.String)">
            <summary>
            Creates an instance of MongoCollectionSettings for the named collection with the rest of the settings inherited.
            You can override some of these settings before calling GetCollection.
            </summary>
            <param name="defaultDocumentType">The default document type for this collection.</param>
            <param name="collectionName">The name of this collection.</param>
            <returns>A MongoCollectionSettings.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.Drop">
            <summary>
            Drops a database.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.DropCollection(System.String)">
            <summary>
            Drops a collection.
            </summary>
            <param name="collectionName">The name of the collection to drop.</param>
            <returns>A CommandResult.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.Eval(MongoDB.Bson.BsonJavaScript,System.Object[],System.Boolean)">
            <summary>
            Evaluates JavaScript code at the server.
            </summary>
            <param name="code">The code to evaluate.</param>
            <param name="args">Optional arguments (only used when the code is a function with parameters).</param>
            <param name="nolock">Whether to run without taking a write lock.</param>
            <returns>The result of evaluating the code.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.Eval(MongoDB.Bson.BsonJavaScript,System.Object[])">
            <summary>
            Evaluates JavaScript code at the server.
            </summary>
            <param name="code">The code to evaluate.</param>
            <param name="args">Optional arguments (only used when the code is a function with parameters).</param>
            <returns>The result of evaluating the code.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.FetchDBRef(MongoDB.Driver.MongoDBRef)">
            <summary>
            Fetches the document referred to by the DBRef.
            </summary>
            <param name="dbRef">The <see cref="T:MongoDB.Driver.MongoDBRef"/> to fetch.</param>
            <returns>A BsonDocument (or null if the document was not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.FetchDBRefAs``1(MongoDB.Driver.MongoDBRef)">
            <summary>
            Fetches the document referred to by the DBRef, deserialized as a <typeparamref name="TDocument"/>.
            </summary>
            <typeparam name="TDocument">The nominal type of the document to fetch.</typeparam>
            <param name="dbRef">The <see cref="T:MongoDB.Driver.MongoDBRef"/> to fetch.</param>
            <returns>A <typeparamref name="TDocument"/> (or null if the document was not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.FetchDBRefAs(System.Type,MongoDB.Driver.MongoDBRef)">
            <summary>
            Fetches the document referred to by the DBRef.
            </summary>
            <param name="documentType">The nominal type of the document to fetch.</param>
            <param name="dbRef">The <see cref="T:MongoDB.Driver.MongoDBRef"/> to fetch.</param>
            <returns>An instance of nominalType (or null if the document was not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.FindAllUsers">
            <summary>
            Finds all users of this database.
            </summary>
            <returns>An array of users.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.FindUser(System.String)">
            <summary>
            Finds a user of this database.
            </summary>
            <param name="username">The username.</param>
            <returns>The user.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetCollection``1(MongoDB.Driver.MongoCollectionSettings{``0})">
            <summary>
            Gets a MongoCollection instance representing a collection on this database
            with a default document type of TDefaultDocument.
            </summary>
            <typeparam name="TDefaultDocument">The default document type for this collection.</typeparam>
            <param name="collectionSettings">The settings to use when accessing this collection.</param>
            <returns>An instance of MongoCollection.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetCollection``1(System.String)">
            <summary>
            Gets a MongoCollection instance representing a collection on this database
            with a default document type of TDefaultDocument.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <returns>An instance of MongoCollection.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetCollection``1(System.String,MongoDB.Driver.SafeMode)">
            <summary>
            Gets a MongoCollection instance representing a collection on this database
            with a default document type of TDefaultDocument.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <param name="safeMode">The safe mode to use when accessing this collection.</param>
            <returns>An instance of MongoCollection.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetCollection(MongoDB.Driver.MongoCollectionSettings)">
            <summary>
            Gets a MongoCollection instance representing a collection on this database
            with a default document type of TDefaultDocument.
            </summary>
            <param name="collectionSettings">The settings to use when accessing this collection.</param>
            <returns>An instance of MongoCollection.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetCollection(System.String)">
            <summary>
            Gets a MongoCollection instance representing a collection on this database
            with a default document type of BsonDocument.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <returns>An instance of MongoCollection.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetCollection(System.String,MongoDB.Driver.SafeMode)">
            <summary>
            Gets a MongoCollection instance representing a collection on this database
            with a default document type of BsonDocument.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <param name="safeMode">The safe mode to use when accessing this collection.</param>
            <returns>An instance of MongoCollection.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetCollection(System.Type,System.String)">
            <summary>
            Gets a MongoCollection instance representing a collection on this database
            with a default document type of BsonDocument.
            </summary>
            <param name="defaultDocumentType">The default document type.</param>
            <param name="collectionName">The name of the collection.</param>
            <returns>An instance of MongoCollection.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetCollection(System.Type,System.String,MongoDB.Driver.SafeMode)">
            <summary>
            Gets a MongoCollection instance representing a collection on this database
            with a default document type of BsonDocument.
            </summary>
            <param name="defaultDocumentType">The default document type.</param>
            <param name="collectionName">The name of the collection.</param>
            <param name="safeMode">The safe mode to use when accessing this collection.</param>
            <returns>An instance of MongoCollection.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetCollectionNames">
            <summary>
            Gets a list of the names of all the collections in this database.
            </summary>
            <returns>A list of collection names.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetCurrentOp">
            <summary>
            Gets the current operation.
            </summary>
            <returns>The current operation.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetGridFS(MongoDB.Driver.GridFS.MongoGridFSSettings)">
            <summary>
            Gets an instance of MongoGridFS for this database using custom GridFS settings.
            </summary>
            <param name="gridFSSettings">The GridFS settings to use.</param>
            <returns>An instance of MongoGridFS.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetSisterDatabase(System.String)">
            <summary>
            Gets a sister database on the same server.
            </summary>
            <param name="databaseName">The name of the sister database.</param>
            <returns>An instance of MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.GetStats">
            <summary>
            Gets the current database stats.
            </summary>
            <returns>An instance of DatabaseStatsResult.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RemoveUser(MongoDB.Driver.MongoUser)">
            <summary>
            Removes a user from this database.
            </summary>
            <param name="user">The user to remove.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RemoveUser(System.String)">
            <summary>
            Removes a user from this database.
            </summary>
            <param name="username">The username to remove.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RenameCollection(System.String,System.String)">
            <summary>
            Renames a collection on this database.
            </summary>
            <param name="oldCollectionName">The old name for the collection.</param>
            <param name="newCollectionName">The new name for the collection.</param>
            <returns>A CommandResult.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RequestDone">
            <summary>
            Lets the server know that this thread is done with a series of related operations. Instead of calling this method it is better
            to put the return value of RequestStart in a using statement.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RequestStart">
            <summary>
            Lets the server know that this thread is about to begin a series of related operations that must all occur
            on the same connection. The return value of this method implements IDisposable and can be placed in a
            using statement (in which case RequestDone will be called automatically when leaving the using statement).
            </summary>
            <returns>A helper object that implements IDisposable and calls <see cref="M:MongoDB.Driver.MongoDatabase.RequestDone"/> from the Dispose method.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.ResetIndexCache">
            <summary>
            Removes all entries for this database in the index cache used by EnsureIndex. Call this method
            when you know (or suspect) that a process other than this one may have dropped one or
            more indexes.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RunCommand(MongoDB.Driver.IMongoCommand)">
            <summary>
            Runs a command on this database.
            </summary>
            <param name="command">The command object.</param>
            <returns>A CommandResult</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RunCommand(System.String)">
            <summary>
            Runs a command on this database.
            </summary>
            <param name="commandName">The name of the command.</param>
            <returns>A CommandResult</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RunCommandAs``1(MongoDB.Driver.IMongoCommand)">
            <summary>
            Runs a command on this database and returns the result as a TCommandResult.
            </summary>
            <param name="command">The command object.</param>
            <returns>A TCommandResult</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RunCommandAs``1(System.String)">
            <summary>
            Runs a command on this database and returns the result as a TCommandResult.
            </summary>
            <param name="commandName">The name of the command.</param>
            <returns>A TCommandResult</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RunCommandAs(System.Type,MongoDB.Driver.IMongoCommand)">
            <summary>
            Runs a command on this database and returns the result as a TCommandResult.
            </summary>
            <param name="commandResultType">The command result type.</param>
            <param name="command">The command object.</param>
            <returns>A TCommandResult</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.RunCommandAs(System.Type,System.String)">
            <summary>
            Runs a command on this database and returns the result as a TCommandResult.
            </summary>
            <param name="commandResultType">The command result type.</param>
            <param name="commandName">The name of the command.</param>
            <returns>A TCommandResult</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoDatabase.ToString">
            <summary>
            Gets a canonical string representation for this database.
            </summary>
            <returns>A canonical string representation for this database.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabase.CommandCollection">
            <summary>
            Gets the command collection for this database.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabase.Credentials">
            <summary>
            Gets the credentials being used to access this database.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabase.GridFS">
            <summary>
            Gets the default GridFS instance for this database. The default GridFS instance uses default GridFS
            settings. See also GetGridFS if you need to use GridFS with custom settings.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabase.Name">
            <summary>
            Gets the name of this database.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabase.Server">
            <summary>
            Gets the server that contains this database.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabase.Settings">
            <summary>
            Gets the settings being used to access this database.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabase.Item(System.String)">
            <summary>
            Gets a MongoCollection instance representing a collection on this database
            with a default document type of BsonDocument.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <returns>An instance of MongoCollection.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoDatabase.Item(System.String,MongoDB.Driver.SafeMode)">
            <summary>
            Gets a MongoCollection instance representing a collection on this database
            with a default document type of BsonDocument.
            </summary>
            <param name="collectionName">The name of the collection.</param>
            <param name="safeMode">The safe mode to use when accessing this collection.</param>
            <returns>An instance of MongoCollection.</returns>
        </member>
        <member name="T:MongoDB.Driver.MongoCursor">
            <summary>
            An object that can be enumerated to fetch the results of a query. The query is not sent
            to the server until you begin enumerating the results.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.#ctor(MongoDB.Driver.MongoCollection,MongoDB.Driver.IMongoQuery)">
            <summary>
            Creates a new MongoCursor. It is very unlikely that you will call this constructor. Instead, see all the Find methods in MongoCollection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.Create(System.Type,MongoDB.Driver.MongoCollection,MongoDB.Driver.IMongoQuery)">
            <summary>
            Creates a cursor.
            </summary>
            <param name="documentType">The type of the returned documents.</param>
            <param name="collection">The collection to query.</param>
            <param name="query">A query.</param>
            <returns>A cursor.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.Clone``1">
            <summary>
            Creates a clone of the cursor.
            </summary>
            <typeparam name="TDocument">The type of the documents returned.</typeparam>
            <returns>A clone of the cursor.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.Clone(System.Type)">
            <summary>
            Creates a clone of the cursor.
            </summary>
            <param name="documentType">The type of the documents returned.</param>
            <returns>A clone of the cursor.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.Count">
            <summary>
            Returns the number of documents that match the query (ignores Skip and Limit, unlike Size which honors them).
            </summary>
            <returns>The number of documents that match the query.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.Explain">
            <summary>
            Returns an explanation of how the query was executed (instead of the results).
            </summary>
            <returns>An explanation of thow the query was executed.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.Explain(System.Boolean)">
            <summary>
            Returns an explanation of how the query was executed (instead of the results).
            </summary>
            <param name="verbose">Whether the explanation should contain more details.</param>
            <returns>An explanation of thow the query was executed.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetBatchSize(System.Int32)">
            <summary>
            Sets the batch size (the number of documents returned per batch).
            </summary>
            <param name="batchSize">The number of documents in each batch.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetFields(MongoDB.Driver.IMongoFields)">
            <summary>
            Sets the fields that will be returned from the server.
            </summary>
            <param name="fields">The fields that will be returned from the server.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetFields(System.String[])">
            <summary>
            Sets the fields that will be returned from the server.
            </summary>
            <param name="fields">The fields that will be returned from the server.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetFlags(MongoDB.Driver.QueryFlags)">
            <summary>
            Sets the query flags.
            </summary>
            <param name="flags">The query flags.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetHint(MongoDB.Bson.BsonDocument)">
            <summary>
            Sets the index hint for the query.
            </summary>
            <param name="hint">The index hint.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetHint(System.String)">
            <summary>
            Sets the index hint for the query.
            </summary>
            <param name="indexName">The name of the index.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetLimit(System.Int32)">
            <summary>
            Sets the limit on the number of documents to be returned.
            </summary>
            <param name="limit">The limit on the number of documents to be returned.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetMax(MongoDB.Bson.BsonDocument)">
            <summary>
            Sets the max value for the index key range of documents to return (note: the max value itself is excluded from the range).
            Often combined with SetHint (if SetHint is not used the server will attempt to determine the matching index automatically).
            </summary>
            <param name="max">The max value.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetMaxScan(System.Int32)">
            <summary>
            Sets the maximum number of documents to scan.
            </summary>
            <param name="maxScan">The maximum number of documents to scan.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetMin(MongoDB.Bson.BsonDocument)">
            <summary>
            Sets the min value for the index key range of documents to return (note: the min value itself is included in the range).
            Often combined with SetHint (if SetHint is not used the server will attempt to determine the matching index automatically).
            </summary>
            <param name="min">The min value.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetOption(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Sets a cursor option.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="value">The value of the option.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetOptions(MongoDB.Bson.BsonDocument)">
            <summary>
            Sets multiple cursor options. See also the individual Set{Option} methods, which are easier to use.
            </summary>
            <param name="options">The options.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetSerializationOptions(MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Sets the serialization options (only needed in rare cases).
            </summary>
            <param name="serializationOptions">The serialization options.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetShowDiskLoc">
            <summary>
            Sets the $showDiskLoc option.
            </summary>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetSkip(System.Int32)">
            <summary>
            Sets the number of documents the server should skip before returning the rest of the documents.
            </summary>
            <param name="skip">The number of documents to skip.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetSlaveOk(System.Boolean)">
            <summary>
            Sets whether the query should be sent to a secondary server.
            </summary>
            <param name="slaveOk">Whether the query should be sent to a secondary server.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetSnapshot">
            <summary>
            Sets the $snapshot option.
            </summary>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetSortOrder(MongoDB.Driver.IMongoSortBy)">
            <summary>
            Sets the sort order for the server to sort the documents by before returning them.
            </summary>
            <param name="sortBy">The sort order.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.SetSortOrder(System.String[])">
            <summary>
            Sets the sort order for the server to sort the documents by before returning them.
            </summary>
            <param name="keys">The names of the fields to sort by.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.Size">
            <summary>
            Returns the size of the result set (honors Skip and Limit, unlike Count which does not).
            </summary>
            <returns>The size of the result set.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor.IEnumerableGetEnumerator">
            <summary>
            Gets the non-generic enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.Server">
            <summary>
            Gets the server that the query will be sent to.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.Database">
            <summary>
            Gets the database that constains the collection that is being queried.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.Collection">
            <summary>
            Gets the collection that is being queried.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.Query">
            <summary>
            Gets the query that will be sent to the server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.Fields">
            <summary>
            Gets or sets the fields that will be returned from the server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.Options">
            <summary>
            Gets or sets the cursor options. See also the individual Set{Option} methods, which are easier to use.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.Flags">
            <summary>
            Gets or sets the query flags.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.SlaveOk">
            <summary>
            Gets or sets whether the query should be sent to a secondary server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.Skip">
            <summary>
            Gets or sets the number of documents the server should skip before returning the rest of the documents.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.Limit">
            <summary>
            Gets or sets the limit on the number of documents to be returned.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.BatchSize">
            <summary>
            Gets or sets the batch size (the number of documents returned per batch).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.SerializationOptions">
            <summary>
            Gets or sets the serialization options (only needed in rare cases).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursor.IsFrozen">
            <summary>
            Gets whether the cursor has been frozen to prevent further changes.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoCursor`1">
            <summary>
            An object that can be enumerated to fetch the results of a query. The query is not sent
            to the server until you begin enumerating the results.
            </summary>
            <typeparam name="TDocument">The type of the documents returned.</typeparam>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.#ctor(MongoDB.Driver.MongoCollection,MongoDB.Driver.IMongoQuery)">
            <summary>
            Creates a new MongoCursor. It is very unlikely that you will call this constructor. Instead, see all the Find methods in MongoCollection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to enumerate the cursor. Normally you will use the foreach statement
            to enumerate the cursor (foreach will call GetEnumerator for you).
            </summary>
            <returns>An enumerator that can be used to iterate over the cursor.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetBatchSize(System.Int32)">
            <summary>
            Sets the batch size (the number of documents returned per batch).
            </summary>
            <param name="batchSize">The number of documents in each batch.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetFields(MongoDB.Driver.IMongoFields)">
            <summary>
            Sets the fields that will be returned from the server.
            </summary>
            <param name="fields">The fields that will be returned from the server.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetFields(System.String[])">
            <summary>
            Sets the fields that will be returned from the server.
            </summary>
            <param name="fields">The fields that will be returned from the server.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetFlags(MongoDB.Driver.QueryFlags)">
            <summary>
            Sets the query flags.
            </summary>
            <param name="flags">The query flags.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetHint(MongoDB.Bson.BsonDocument)">
            <summary>
            Sets the index hint for the query.
            </summary>
            <param name="hint">The index hint.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetHint(System.String)">
            <summary>
            Sets the index hint for the query.
            </summary>
            <param name="indexName">The name of the index.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetLimit(System.Int32)">
            <summary>
            Sets the limit on the number of documents to be returned.
            </summary>
            <param name="limit">The limit on the number of documents to be returned.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetMax(MongoDB.Bson.BsonDocument)">
            <summary>
            Sets the max value for the index key range of documents to return (note: the max value itself is excluded from the range).
            Often combined with SetHint (if SetHint is not used the server will attempt to determine the matching index automatically).
            </summary>
            <param name="max">The max value.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetMaxScan(System.Int32)">
            <summary>
            Sets the maximum number of documents to scan.
            </summary>
            <param name="maxScan">The maximum number of documents to scan.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetMin(MongoDB.Bson.BsonDocument)">
            <summary>
            Sets the min value for the index key range of documents to return (note: the min value itself is included in the range).
            Often combined with SetHint (if SetHint is not used the server will attempt to determine the matching index automatically).
            </summary>
            <param name="min">The min value.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetOption(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Sets a cursor option.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="value">The value of the option.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetOptions(MongoDB.Bson.BsonDocument)">
            <summary>
            Sets multiple cursor options. See also the individual Set{Option} methods, which are easier to use.
            </summary>
            <param name="options">The options.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetSerializationOptions(MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Sets the serialization options (only needed in rare cases).
            </summary>
            <param name="serializationOptions">The serialization options.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetShowDiskLoc">
            <summary>
            Sets the $showDiskLoc option.
            </summary>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetSkip(System.Int32)">
            <summary>
            Sets the number of documents the server should skip before returning the rest of the documents.
            </summary>
            <param name="skip">The number of documents to skip.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetSlaveOk(System.Boolean)">
            <summary>
            Sets whether the query should be sent to a secondary server.
            </summary>
            <param name="slaveOk">Whether the query should be sent to a secondary server.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetSnapshot">
            <summary>
            Sets the $snapshot option.
            </summary>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetSortOrder(MongoDB.Driver.IMongoSortBy)">
            <summary>
            Sets the sort order for the server to sort the documents by before returning them.
            </summary>
            <param name="sortBy">The sort order.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.SetSortOrder(System.String[])">
            <summary>
            Sets the sort order for the server to sort the documents by before returning them.
            </summary>
            <param name="keys">The names of the fields to sort by.</param>
            <returns>The cursor (so you can chain method calls to it).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursor`1.IEnumerableGetEnumerator">
            <summary>
            Gets the non-generic enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.SortByWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoSortBy is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="T:MongoDB.Driver.IMongoSortBy">
            <summary>
            A marker interface that represents a sort order (see SortByDocument and the SortBy builder).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.SortByWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the SortByWrapper class.
            </summary>
            <param name="sortBy">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.SortByWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the SortByWrapper class.
            </summary>
            <param name="sortBy">The wrapped object.</param>
            <returns>A new instance of SortByWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.GroupByWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoGroupBy is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.GroupByWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the GroupByWrapper class.
            </summary>
            <param name="groupBy">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.GroupByWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the GroupByWrapper class.
            </summary>
            <param name="groupBy">The wrapped object.</param>
            <returns>A new instance of GroupByWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.MongoServerBuildInfo">
            <summary>
            Represents build info about a server instance.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServerBuildInfo.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of MongoServerBuildInfo.
            </summary>
            <param name="bits">The number of bits (32 or 64).</param>
            <param name="gitVersion">The GIT version.</param>
            <param name="sysInfo">The sysInfo.</param>
            <param name="versionString">The version string.</param>
        </member>
        <member name="P:MongoDB.Driver.MongoServerBuildInfo.Bits">
            <summary>
            Gets the number of bits (32 or 64).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerBuildInfo.GitVersion">
            <summary>
            Gets the GIT version.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerBuildInfo.SysInfo">
            <summary>
            Gets the sysInfo.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerBuildInfo.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerBuildInfo.VersionString">
            <summary>
            Gets the version string.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.SafeModeResult">
            <summary>
            Represents the results of an operation performed with a safe mode.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.GetLastErrorResult">
            <summary>
            Represents the results of a GetLastError command.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GetLastErrorResult.#ctor">
            <summary>
            Initializes a new instance of the GetLastErrorResult class.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GetLastErrorResult.DocumentsAffected">
            <summary>
            Gets the number of documents affected.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GetLastErrorResult.HasLastErrorMessage">
            <summary>
            Gets whether the result has a LastErrorMessage.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GetLastErrorResult.LastErrorMessage">
            <summary>
            Gets the last error message (null if none).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.GetLastErrorResult.UpdatedExisting">
            <summary>
            Gets whether the last command updated an existing document.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.SafeModeResult.#ctor">
            <summary>
            Initializes a new instance of the SafeModeResult class.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoConnectionStringBuilder">
            <summary>
            Represents .NET style connection strings. We recommend you use URL style connection strings
            (see MongoUrl and MongoUrlBuilder).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoConnectionStringBuilder.#ctor">
            <summary>
            Creates a new instance of MongoConnectionStringBuilder.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Creates a new instance of MongoConnectionStringBuilder.
            </summary>
            <param name="connectionString">The initial settings.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoConnectionStringBuilder.Clear">
            <summary>
            Clears all settings to their default values.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoConnectionStringBuilder.ContainsKey(System.String)">
            <summary>
            Tests whether a keyword is valid.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>True if the keyword is valid.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoConnectionStringBuilder.ToServerSettings">
            <summary>
            Creates a new instance of MongoServerSettings based on the settings in this MongoConnectionStringBuilder.
            </summary>
            <returns>A new instance of MongoServerSettings.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.ComputedWaitQueueSize">
            <summary>
            Gets the actual wait queue size (either WaitQueueSize or WaitQueueMultiple x MaxConnectionPoolSize).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.ConnectionMode">
            <summary>
            Gets or sets the connection mode.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.ConnectTimeout">
            <summary>
            Gets or sets the connect timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.DatabaseName">
            <summary>
            Gets or sets the optional database name.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.GuidRepresentation">
            <summary>
            Gets or sets the representation for Guids.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.IPv6">
            <summary>
            Gets or sets whether to use IPv6.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.MaxConnectionIdleTime">
            <summary>
            Gets or sets the max connection idle time.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.MaxConnectionLifeTime">
            <summary>
            Gets or sets the max connection life time.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.MaxConnectionPoolSize">
            <summary>
            Gets or sets the max connection pool size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.MinConnectionPoolSize">
            <summary>
            Gets or sets the min connection pool size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.Password">
            <summary>
            Gets or sets the default password.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.ReplicaSetName">
            <summary>
            Gets or sets the name of the replica set.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.SafeMode">
            <summary>
            Gets or sets the SafeMode to use.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.Server">
            <summary>
            Gets or sets the address of the server (see also Servers if using more than one address).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.Servers">
            <summary>
            Gets or sets the list of server addresses (see also Server if using only one address).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.SlaveOk">
            <summary>
            Gets or sets whether queries should be sent to secondary servers.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.SocketTimeout">
            <summary>
            Gets or sets the socket timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.Username">
            <summary>
            Gets or sets the default username.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.WaitQueueMultiple">
            <summary>
            Gets or sets the wait queue multiple (the actual wait queue size will be WaitQueueMultiple x MaxConnectionPoolSize).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.WaitQueueSize">
            <summary>
            Gets or sets the wait queue size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.WaitQueueTimeout">
            <summary>
            Gets or sets the wait queue timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoConnectionStringBuilder.Item(System.String)">
            <summary>
            Gets or sets individual settings by keyword.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>The value of the setting.</returns>
        </member>
        <member name="T:MongoDB.Driver.MongoUtils">
            <summary>
            Various static utility methods.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoUtils.Hash(System.String)">
            <summary>
            Gets the MD5 hash of a string.
            </summary>
            <param name="text">The string to get the MD5 hash of.</param>
            <returns>The MD5 hash.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUtils.ToCamelCase(System.String)">
            <summary>
            Converts a string to camel case by lower casing the first letter (only the first letter is modified).
            </summary>
            <param name="value">The string to camel case.</param>
            <returns>The camel cased string.</returns>
        </member>
        <member name="T:MongoDB.Driver.Internal.BlockingQueue`1">
            <summary>
            Represents a thread-safe queue.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
        </member>
        <member name="M:MongoDB.Driver.Internal.BlockingQueue`1.#ctor">
            <summary>
            Initializes a new instance of the BlockingQueue class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Internal.BlockingQueue`1.Dequeue(System.TimeSpan)">
            <summary>
            Dequeues one item from the queue. Will block waiting for an item if the queue is empty.
            </summary>
            <param name="timeout">The timeout for waiting for an item to appear in the queue.</param>
            <returns>The first item in the queue (null if it timed out).</returns>
        </member>
        <member name="M:MongoDB.Driver.Internal.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Enqueues an item on to the queue.
            </summary>
            <param name="item">The item to be queued.</param>
        </member>
        <member name="T:MongoDB.Driver.MongoQueryException">
            <summary>
            Represents a MongoDB query exception.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoQueryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MongoQueryException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoQueryException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MongoQueryException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MongoQueryException class (this overload supports deserialization).
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:MongoDB.Driver.ScopeDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoScope is expected.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.ScopeDocument.#ctor">
            <summary>
            Initializes a new instance of the ScopeDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.ScopeDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ScopeDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.ScopeDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the ScopeDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.ScopeDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the ScopeDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.ScopeDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the ScopeDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.ScopeDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the ScopeDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.ScopeDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the ScopeDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.ScopeDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the ScopeDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.ScopeDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the ScopeDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.ScopeDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the ScopeDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.IndexKeysWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoIndexKeys is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="T:MongoDB.Driver.IMongoIndexKeys">
            <summary>
            A marker interface that represents the keys of an index (see IndexKeysDocument and the IndexKeys builder).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.IndexKeysWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the IndexKeysWrapper class.
            </summary>
            <param name="keys">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.IndexKeysWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the IndexKeysWrapper class.
            </summary>
            <param name="keys">The wrapped object.</param>
            <returns>A new instance of IndexKeysWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.MongoDBRef">
            <summary>
            Represents a DBRef (a convenient way to refer to a document).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoDBRef.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Creates a MongoDBRef.
            </summary>
            <param name="collectionName">The name of the collection that contains the document.</param>
            <param name="id">The Id of the document.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoDBRef.#ctor(System.String,System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Creates a MongoDBRef.
            </summary>
            <param name="databaseName">The name of the database that contains the document.</param>
            <param name="collectionName">The name of the collection that contains the document.</param>
            <param name="id">The Id of the document.</param>
        </member>
        <member name="P:MongoDB.Driver.MongoDBRef.DatabaseName">
            <summary>
            Gets the name of the database that contains the document.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDBRef.CollectionName">
            <summary>
            Gets the name of the collection that contains the document.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoDBRef.Id">
            <summary>
            Gets the Id of the document.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoSafeModeException">
            <summary>
            Represents a MongoDB safe mode exception.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoCommandException">
            <summary>
            Represents a MongoDB command exception.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoCommandException.#ctor(MongoDB.Driver.CommandResult)">
            <summary>
            Initializes a new instance of the MongoCommandException class.
            </summary>
            <param name="commandResult">The command result (an error message will be constructed using the result).</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MongoCommandException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MongoCommandException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCommandException.#ctor(System.String,MongoDB.Driver.CommandResult)">
            <summary>
            Initializes a new instance of the MongoCommandException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="commandResult">The command result.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MongoCommandException class (this overload supports deserialization).
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="P:MongoDB.Driver.MongoCommandException.CommandResult">
            <summary>
            Gets the command result.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoSafeModeException.#ctor(System.String,MongoDB.Driver.CommandResult)">
            <summary>
            Initializes a new instance of the MongoSafeModeException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="commandResult">The command result.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoSafeModeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MongoSafeModeException class (this overload supports deserialization).
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:MongoDB.Driver.MongoServerInstance">
            <summary>
            Represents an instance of a MongoDB server host (in the case of a replica set a MongoServer uses multiple MongoServerInstances).
            </summary>
        </member>
        <member name="E:MongoDB.Driver.MongoServerInstance.StateChanged">
            <summary>
            Occurs when the value of the State property changes.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.Address">
            <summary>
            Gets the address of this server instance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.BuildInfo">
            <summary>
            Gets the version of this server instance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.ConnectException">
            <summary>
            Gets the exception thrown the last time Connect was called (null if Connect did not throw an exception).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.ConnectionPool">
            <summary>
            Gets the connection pool for this server instance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.EndPoint">
            <summary>
            Gets the IP end point of this server instance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.IsArbiter">
            <summary>
            Gets whether this server instance is an arbiter instance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.IsMasterResult">
            <summary>
            Gets the result of the most recent ismaster command sent to this server instance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.IsPassive">
            <summary>
            Gets whether this server instance is a passive instance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.IsPrimary">
            <summary>
            Gets whether this server instance is a primary.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.IsSecondary">
            <summary>
            Gets whether this server instance is a secondary.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.MaxDocumentSize">
            <summary>
            Gets the max document size for this server instance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.MaxMessageLength">
            <summary>
            Gets the max message length for this server instance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.Server">
            <summary>
            Gets the server for this server instance.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServerInstance.State">
            <summary>
            Gets the state of this server instance.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.IMongoFields">
            <summary>
            A marker interface that represents a list of fields (see FieldsDocument and the Fields builder).
            </summary>
        </member>
        <member name="T:MongoDB.Driver.SafeMode">
            <summary>
            Represents the different safe modes that can be used.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of SafeMode.
            </summary>
            <param name="enabled">Whether safe mode is enabled.</param>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of SafeMode.
            </summary>
            <param name="enabled">Whether safe mode is enabled.</param>
            <param name="fsync">Whether the server should call fsync after each operation.</param>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.#ctor(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a new instance of SafeMode.
            </summary>
            <param name="enabled">Whether safe mode is enabled.</param>
            <param name="fsync">Whether the server should call fsync after each operation.</param>
            <param name="w">The number of write replications that should be completed before server returns.</param>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.#ctor(System.Boolean,System.Boolean,System.Int32,System.TimeSpan)">
            <summary>
            Creates a new instance of SafeMode.
            </summary>
            <param name="enabled">Whether safe mode is enabled.</param>
            <param name="fsync">Whether the server should call fsync after each operation.</param>
            <param name="w">The number of write replications that should be completed before server returns.</param>
            <param name="wtimeout">The timeout for each operation.</param>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.#ctor(System.Int32)">
            <summary>
            Creates a new instance of SafeMode.
            </summary>
            <param name="w">The number of write replications that should be completed before server returns.</param>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Creates a new instance of SafeMode.
            </summary>
            <param name="w">The number of write replications that should be completed before server returns.</param>
            <param name="wtimeout">The timeout for each operation.</param>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.op_Equality(MongoDB.Driver.SafeMode,MongoDB.Driver.SafeMode)">
            <summary>
            Compares two SafeMode values.
            </summary>
            <param name="lhs">The first SafeMode value.</param>
            <param name="rhs">The other SafeMode value.</param>
            <returns>True if the values are equal (or both null).</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.op_Inequality(MongoDB.Driver.SafeMode,MongoDB.Driver.SafeMode)">
            <summary>
            Compares two SafeMode values.
            </summary>
            <param name="lhs">The first SafeMode value.</param>
            <param name="rhs">The other SafeMode value.</param>
            <returns>True if the values are not equal (or one is null and the other is not).</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.Create(System.Boolean)">
            <summary>
            Creates a SafeMode instance (or returns an existing instance).
            </summary>
            <param name="enabled">Whether safe mode is enabled.</param>
            <returns>A SafeMode instance.</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.Create(System.Boolean,System.Boolean)">
            <summary>
            Creates a SafeMode instance (or returns an existing instance).
            </summary>
            <param name="enabled">Whether safe mode is enabled.</param>
            <param name="fsync">Whether fysnc is true.</param>
            <returns>A SafeMode instance.</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.Create(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Creates a SafeMode instance (or returns an existing instance).
            </summary>
            <param name="enabled">Whether safe mode is enabled.</param>
            <param name="fsync">Whether fysnc is true.</param>
            <param name="w">The number of write replications that should be completed before server returns.</param>
            <returns>A SafeMode instance.</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.Create(System.Boolean,System.Boolean,System.Int32,System.TimeSpan)">
            <summary>
            Creates a SafeMode instance (or returns an existing instance).
            </summary>
            <param name="enabled">Whether safe mode is enabled.</param>
            <param name="fsync">Whether fysnc is true.</param>
            <param name="w">The number of write replications that should be completed before server returns.</param>
            <param name="wtimeout">The timeout for each operation.</param>
            <returns>A SafeMode instance.</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.Create(System.Int32)">
            <summary>
            Creates a SafeMode instance (or returns an existing instance).
            </summary>
            <param name="w">The number of write replications that should be completed before server returns.</param>
            <returns>A SafeMode instance.</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.Create(System.Int32,System.TimeSpan)">
            <summary>
            Creates a SafeMode instance (or returns an existing instance).
            </summary>
            <param name="w">The number of write replications that should be completed before server returns.</param>
            <param name="wtimeout">The timeout for each operation.</param>
            <returns>A SafeMode instance.</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.Equals(System.Object)">
            <summary>
            Compares two SafeMode values.
            </summary>
            <param name="obj">The other SafeMode value.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.Equals(MongoDB.Driver.SafeMode)">
            <summary>
            Compares two SafeMode values.
            </summary>
            <param name="rhs">The other SafeMode value.</param>
            <returns>True if the values are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:MongoDB.Driver.SafeMode.ToString">
            <summary>
            Returns a string representation of the SafeMode.
            </summary>
            <returns>A string representation of the SafeMode.</returns>
        </member>
        <member name="P:MongoDB.Driver.SafeMode.False">
            <summary>
            Gets an instance of SafeMode with safe mode off.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.SafeMode.FSyncTrue">
            <summary>
            Gets an instance of SafeMode with fsync=true.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.SafeMode.True">
            <summary>
            Gets an instance of SafeMode with safe mode on.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.SafeMode.W2">
            <summary>
            Gets an instance of SafeMode with safe mode on and w=2.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.SafeMode.W3">
            <summary>
            Gets an instance of SafeMode with safe mode on and w=3.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.SafeMode.W4">
            <summary>
            Gets an instance of SafeMode with safe mode on and w=4.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.SafeMode.Enabled">
            <summary>
            Gets whether safe mode is enabled.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.SafeMode.FSync">
            <summary>
            Gets whether fsync is true.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.SafeMode.W">
            <summary>
            Gets the w value (the number of write replications that must complete before the server returns).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.SafeMode.WTimeout">
            <summary>
            Gets the wtimeout value (the timeout before which the server must return).
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoConnectionException">
            <summary>
            Represents a MongoDB connection exception.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MongoConnectionException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MongoConnectionException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MongoConnectionException class (this overload supports deserialization).
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.ScopeWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoScope is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.ScopeWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ScopeWrapper class.
            </summary>
            <param name="scope">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.ScopeWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the ScopeWrapper class.
            </summary>
            <param name="scope">The wrapped object.</param>
            <returns>A new instance of ScopeWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.GeoNearOptionsWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoGeoNearOptions is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.GeoNearOptionsWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the GeoNearOptionsWrapper class.
            </summary>
            <param name="options">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.GeoNearOptionsWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the GeoNearOptionsWrapper class.
            </summary>
            <param name="options">The wrapped object.</param>
            <returns>A new instance of GeoNearOptionsWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.CollectionOptionsWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoCollectionOptions is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.CollectionOptionsWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the CollectionOptionsWrapper class.
            </summary>
            <param name="options">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.CollectionOptionsWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the CollectionOptionsWrapper class.
            </summary>
            <param name="options">The wrapped object.</param>
            <returns>A new instance of CollectionOptionsWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.MongoServer">
            <summary>
            Represents a MongoDB server (either a single instance or a replica set) and the settings used to access it. This class is thread-safe.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.#ctor(MongoDB.Driver.MongoServerSettings)">
            <summary>
            Creates a new instance of MongoServer. Normally you will use one of the Create methods instead
            of the constructor to create instances of this class.
            </summary>
            <param name="settings">The settings for this instance of MongoServer.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Create">
            <summary>
            Creates a new instance or returns an existing instance of MongoServer. Only one instance
            is created for each combination of server settings.
            </summary>
            <returns>
            A new or existing instance of MongoServer.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Create(MongoDB.Driver.MongoConnectionStringBuilder)">
            <summary>
            Creates a new instance or returns an existing instance of MongoServer. Only one instance
            is created for each combination of server settings.
            </summary>
            <param name="builder">Server settings in the form of a MongoConnectionStringBuilder.</param>
            <returns>
            A new or existing instance of MongoServer.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Create(MongoDB.Driver.MongoServerSettings)">
            <summary>
            Creates a new instance or returns an existing instance of MongoServer. Only one instance
            is created for each combination of server settings.
            </summary>
            <param name="settings">Server settings.</param>
            <returns>
            A new or existing instance of MongoServer.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Create(MongoDB.Driver.MongoUrl)">
            <summary>
            Creates a new instance or returns an existing instance of MongoServer. Only one instance
            is created for each combination of server settings.
            </summary>
            <param name="url">Server settings in the form of a MongoUrl.</param>
            <returns>
            A new or existing instance of MongoServer.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Create(System.String)">
            <summary>
            Creates a new instance or returns an existing instance of MongoServer. Only one instance
            is created for each combination of server settings.
            </summary>
            <param name="connectionString">Server settings in the form of a connection string.</param>
            <returns>
            A new or existing instance of MongoServer.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Create(System.Uri)">
            <summary>
            Creates a new instance or returns an existing instance of MongoServer. Only one instance
            is created for each combination of server settings.
            </summary>
            <param name="uri">Server settings in the form of a Uri.</param>
            <returns>
            A new or existing instance of MongoServer.
            </returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.UnregisterServer(MongoDB.Driver.MongoServer)">
            <summary>
            Unregisters a server from the dictionary used by Create to remember which servers have already been created.
            </summary>
            <param name="server">The server to unregister.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Connect">
            <summary>
            Connects to the server. Normally there is no need to call this method as
            the driver will connect to the server automatically when needed.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Connect(System.TimeSpan)">
            <summary>
            Connects to the server. Normally there is no need to call this method as
            the driver will connect to the server automatically when needed.
            </summary>
            <param name="timeout">How long to wait before timing out.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.CopyDatabase(System.String,System.String)">
            <summary>
            Copies a database.
            </summary>
            <param name="from">The name of an existing database.</param>
            <param name="to">The name of the new database.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.CreateDatabaseSettings(System.String)">
            <summary>
            Creates an instance of MongoDatabaseSettings for the named database with the rest of the settings inherited.
            You can override some of these settings before calling GetDatabase.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>An instance of MongoDatabase for <paramref name="databaseName"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.DatabaseExists(System.String)">
            <summary>
            Tests whether a database exists.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>True if the database exists.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Disconnect">
            <summary>
            Disconnects from the server. Normally there is no need to call this method so
            you should be sure to have a good reason to call it.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.DropDatabase(System.String)">
            <summary>
            Drops a database.
            </summary>
            <param name="databaseName">The name of the database to be dropped.</param>
            <returns>A <see cref="T:MongoDB.Driver.CommandResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.FetchDBRef(MongoDB.Driver.MongoDBRef)">
            <summary>
            Fetches the document referred to by the DBRef.
            </summary>
            <param name="dbRef">The <see cref="T:MongoDB.Driver.MongoDBRef"/> to fetch.</param>
            <returns>A BsonDocument (or null if the document was not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.FetchDBRefAs``1(MongoDB.Driver.MongoDBRef)">
            <summary>
            Fetches the document referred to by the DBRef, deserialized as a <typeparamref name="TDocument"/>.
            </summary>
            <typeparam name="TDocument">The nominal type of the document to fetch.</typeparam>
            <param name="dbRef">The <see cref="T:MongoDB.Driver.MongoDBRef"/> to fetch.</param>
            <returns>A <typeparamref name="TDocument"/> (or null if the document was not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.FetchDBRefAs(System.Type,MongoDB.Driver.MongoDBRef)">
            <summary>
            Fetches the document referred to by the DBRef.
            </summary>
            <param name="documentType">The nominal type of the document to fetch.</param>
            <param name="dbRef">The <see cref="T:MongoDB.Driver.MongoDBRef"/> to fetch.</param>
            <returns>The document (or null if the document was not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.GetAdminDatabase(MongoDB.Driver.MongoCredentials)">
            <summary>
            Gets a MongoDatabase instance representing the admin database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="credentials">The credentials to use with the admin database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.GetAdminDatabase(MongoDB.Driver.MongoCredentials,MongoDB.Driver.SafeMode)">
            <summary>
            Gets a MongoDatabase instance representing the admin database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="credentials">The credentials to use with the admin database.</param>
            <param name="safeMode">The safe mode to use with the admin database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.GetAdminDatabase(MongoDB.Driver.SafeMode)">
            <summary>
            Gets a MongoDatabase instance representing the admin database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="safeMode">The safe mode to use with the admin database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.GetDatabase(MongoDB.Driver.MongoDatabaseSettings)">
            <summary>
            Gets a MongoDatabase instance representing a database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="databaseSettings">The settings to use with this database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.GetDatabase(System.String)">
            <summary>
            Gets a MongoDatabase instance representing a database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.GetDatabase(System.String,MongoDB.Driver.MongoCredentials)">
            <summary>
            Gets a MongoDatabase instance representing a database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="credentials">The credentials to use with this database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.GetDatabase(System.String,MongoDB.Driver.MongoCredentials,MongoDB.Driver.SafeMode)">
            <summary>
            Gets a MongoDatabase instance representing a database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="credentials">The credentials to use with this database.</param>
            <param name="safeMode">The safe mode to use with this database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.GetDatabase(System.String,MongoDB.Driver.SafeMode)">
            <summary>
            Gets a MongoDatabase instance representing a database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="safeMode">The safe mode to use with this database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.GetDatabaseNames">
            <summary>
            Gets the names of the databases on this server.
            </summary>
            <returns>A list of database names.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.GetLastError">
            <summary>
            Gets the last error (if any) that occurred on this connection. You MUST be within a RequestStart to call this method.
            </summary>
            <returns>The last error (<see cref="T:MongoDB.Driver.GetLastErrorResult"/>)</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Ping">
            <summary>
            Checks whether the server is alive (throws an exception if not).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Reconnect">
            <summary>
            Reconnects to the server. Normally there is no need to call this method. All connections
            are closed and new connections will be opened as needed. Calling
            this method frequently will result in connection thrashing.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.RequestDone">
            <summary>
            Lets the server know that this thread is done with a series of related operations. Instead of calling this method it is better
            to put the return value of RequestStart in a using statement.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.RequestStart(MongoDB.Driver.MongoDatabase)">
            <summary>
            Lets the server know that this thread is about to begin a series of related operations that must all occur
            on the same connection. The return value of this method implements IDisposable and can be placed in a
            using statement (in which case RequestDone will be called automatically when leaving the using statement).
            </summary>
            <param name="initialDatabase">One of the databases involved in the related operations.</param>
            <returns>A helper object that implements IDisposable and calls <see cref="M:MongoDB.Driver.MongoServer.RequestDone"/> from the Dispose method.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.ResetIndexCache">
            <summary>
            Removes all entries in the index cache used by EnsureIndex. Call this method
            when you know (or suspect) that a process other than this one may have dropped one or
            more indexes.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.RunAdminCommand(MongoDB.Driver.IMongoCommand)">
            <summary>
            Runs a command on the admin database.
            </summary>
            <param name="command">The command to run.</param>
            <returns>The result of the command (see <see cref="T:MongoDB.Driver.CommandResult"/>).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.RunAdminCommand(System.String)">
            <summary>
            Runs a command on the admin database.
            </summary>
            <param name="commandName">The name of the command to run.</param>
            <returns>The result of the command (as a <see cref="T:MongoDB.Driver.CommandResult"/>).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.RunAdminCommandAs``1(MongoDB.Driver.IMongoCommand)">
            <summary>
            Runs a command on the admin database.
            </summary>
            <typeparam name="TCommandResult">The type to use for the command result.</typeparam>
            <param name="command">The command to run.</param>
            <returns>The result of the command (as a <typeparamref name="TCommandResult"/>).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.RunAdminCommandAs``1(System.String)">
            <summary>
            Runs a command on the admin database.
            </summary>
            <typeparam name="TCommandResult">The type to use for the command result.</typeparam>
            <param name="commandName">The name of the command to run.</param>
            <returns>The result of the command (as a <typeparamref name="TCommandResult"/>).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.RunAdminCommandAs(System.Type,MongoDB.Driver.IMongoCommand)">
            <summary>
            Runs a command on the admin database.
            </summary>
            <param name="commandResultType">The type to use for the command result.</param>
            <param name="command">The command to run.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.RunAdminCommandAs(System.Type,System.String)">
            <summary>
            Runs a command on the admin database.
            </summary>
            <param name="commandResultType">The type to use for the command result.</param>
            <param name="commandName">The name of the command to run.</param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoServer.Shutdown">
            <summary>
            Shuts down the server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.MaxServerCount">
            <summary>
            Gets or sets the maximum number of instances of MongoServer that will be allowed to be created.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.ServerCount">
            <summary>
            Gets the number of instances of MongoServer that have been created.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.AdminDatabase">
            <summary>
            Gets the admin database for this server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Arbiters">
            <summary>
            Gets the arbiter instances.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.BuildInfo">
            <summary>
            Gets the build info of the server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.IndexCache">
            <summary>
            Gets the index cache (used by EnsureIndex) for this server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Instance">
            <summary>
            Gets the one and only instance for this server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Instances">
            <summary>
            Gets the instances for this server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Passives">
            <summary>
            Gets the passive instances.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Primary">
            <summary>
            Gets the primary instance (null if there is no primary).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.ReplicaSetName">
            <summary>
            Gets the name of the replica set (null if not connected to a replica set).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.RequestNestingLevel">
            <summary>
            Gets the RequestStart nesting level for the current thread.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Secondaries">
            <summary>
            Gets the secondary instances.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Settings">
            <summary>
            Gets the settings for this server.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.State">
            <summary>
            Gets the current state of this server (as of the last operation, not updated until another operation is performed).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Item(System.String)">
            <summary>
            Gets a MongoDatabase instance representing a database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Item(System.String,MongoDB.Driver.MongoCredentials)">
            <summary>
            Gets a MongoDatabase instance representing a database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="credentials">The credentials to use with this database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Item(MongoDB.Driver.MongoDatabaseSettings)">
            <summary>
            Gets a MongoDatabase instance representing a database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="databaseSettings">The settings to use with this database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Item(System.String,MongoDB.Driver.MongoCredentials,MongoDB.Driver.SafeMode)">
            <summary>
            Gets a MongoDatabase instance representing a database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="credentials">The credentials to use with this database.</param>
            <param name="safeMode">The safe mode to use with this database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoServer.Item(System.String,MongoDB.Driver.SafeMode)">
            <summary>
            Gets a MongoDatabase instance representing a database on this server. Only one instance
            is created for each combination of database settings.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <param name="safeMode">The safe mode to use with this database.</param>
            <returns>A new or existing instance of MongoDatabase.</returns>
        </member>
        <member name="T:MongoDB.Driver.SortByDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoSortBy is expected.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.SortByDocument.#ctor">
            <summary>
            Initializes a new instance of the SortByDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.SortByDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SortByDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.SortByDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the SortByDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.SortByDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the SortByDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.SortByDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the SortByDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.SortByDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the SortByDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.SortByDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the SortByDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.SortByDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the SortByDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.SortByDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the SortByDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.SortByDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the SortByDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.FieldsWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoFields is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.FieldsWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the FieldsWrapper class.
            </summary>
            <param name="fields">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.FieldsWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the FieldsWrapper class.
            </summary>
            <param name="fields">The wrapped object.</param>
            <returns>A new instance of FieldsWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.Builders.SortBy">
            <summary>
            A builder for specifying a sort order.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.SortBy.Ascending(System.String[])">
            <summary>
            Adds keys to be sorted by in ascending order.
            </summary>
            <param name="keys">One or more key names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.SortBy.Descending(System.String[])">
            <summary>
            Adds keys to be sorted by in descending order.
            </summary>
            <param name="keys">One or more key names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="P:MongoDB.Driver.Builders.SortBy.Null">
            <summary>
            Gets a null value with a type of IMongoSortBy.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.SortByBuilder">
            <summary>
            A builder for specifying a sort order.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.SortByBuilder.#ctor">
            <summary>
            Initializes a new instance of the SortByBuider class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.SortByBuilder.Ascending(System.String[])">
            <summary>
            Adds keys to be sorted by in ascending order.
            </summary>
            <param name="keys">One or more key names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.SortByBuilder.Descending(System.String[])">
            <summary>
            Adds keys to be sorted by in descending order.
            </summary>
            <param name="keys">One or more key names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.SortByBuilder.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.SortByBuilder.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="T:MongoDB.Driver.Builders.IndexKeys">
            <summary>
            A builder for specifying the keys for an index.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexKeys.Ascending(System.String[])">
            <summary>
            Sets one or more key names to index in ascending order.
            </summary>
            <param name="names">One or more key names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexKeys.Descending(System.String[])">
            <summary>
            Sets one or more key names to index in descending order.
            </summary>
            <param name="names">One or more key names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexKeys.GeoSpatial(System.String)">
            <summary>
            Sets the key name to create a geospatial index on.
            </summary>
            <param name="name">The key name.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="T:MongoDB.Driver.Builders.IndexKeysBuilder">
            <summary>
            A builder for specifying the keys for an index.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexKeysBuilder.#ctor">
            <summary>
            Initializes a new instance of the IndexKeysBuilder class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexKeysBuilder.Ascending(System.String[])">
            <summary>
            Sets one or more key names to index in ascending order.
            </summary>
            <param name="names">One or more key names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexKeysBuilder.Descending(System.String[])">
            <summary>
            Sets one or more key names to index in descending order.
            </summary>
            <param name="names">One or more key names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexKeysBuilder.GeoSpatial(System.String)">
            <summary>
            Sets the key name to create a geospatial index on.
            </summary>
            <param name="name">The key name.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexKeysBuilder.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.IndexKeysBuilder.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="T:MongoDB.Driver.MongoServerState">
            <summary>
            The state of a MongoServer instance.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.MongoServerState.None">
            <summary>
            The state has not yet been determined.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.MongoServerState.Disconnected">
            <summary>
            Disconnected from the server.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.MongoServerState.Connecting">
            <summary>
            Connecting to the server (in progress).
            </summary>
        </member>
        <member name="F:MongoDB.Driver.MongoServerState.Connected">
            <summary>
            Connected to the server.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoCursorEnumerator`1">
            <summary>
            Reprsents an enumerator that fetches the results of a query sent to the server.
            </summary>
            <typeparam name="TDocument"></typeparam>
        </member>
        <member name="M:MongoDB.Driver.MongoCursorEnumerator`1.#ctor(MongoDB.Driver.MongoCursor{`0})">
            <summary>
            Initializes a new instance of the MongoCursorEnumerator class.
            </summary>
            <param name="cursor">The cursor to be enumerated.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCursorEnumerator`1.Dispose">
            <summary>
            Disposes of any resources held by this enumerator.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoCursorEnumerator`1.MoveNext">
            <summary>
            Moves to the next result and returns true if another result is available.
            </summary>
            <returns>True if another result is available.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCursorEnumerator`1.Reset">
            <summary>
            Resets the enumerator (not supported by MongoCursorEnumerator).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursorEnumerator`1.Current">
            <summary>
            Gets the current document.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursorEnumerator`1.IsDead">
            <summary>
            Gets whether the cursor is dead (used with tailable cursors).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCursorEnumerator`1.IsServerAwaitCapable">
            <summary>
            Gets whether the server is await capable (used with tailable cursors).
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoAuthenticationException">
            <summary>
            Represents a MongoDB authentication exception
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoAuthenticationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MongoAuthenticationException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoAuthenticationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MongoAuthenticationException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoAuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MongoAuthenticationException class (this overload supports deserialization).
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:MongoDB.Driver.FieldsDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoFields is expected.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.FieldsDocument.#ctor">
            <summary>
            Initializes a new instance of the FieldsDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.FieldsDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FieldsDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.FieldsDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the FieldsDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.FieldsDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the FieldsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.FieldsDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the FieldsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.FieldsDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the FieldsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.FieldsDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the FieldsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.FieldsDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the FieldsDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.FieldsDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the FieldsDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.FieldsDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the FieldsDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.IndexKeysDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoIndexKeys is expected.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.IndexKeysDocument.#ctor">
            <summary>
            Initializes a new instance of the IndexKeysDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.IndexKeysDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IndexKeysDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexKeysDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the IndexKeysDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexKeysDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the IndexKeysDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexKeysDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the IndexKeysDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexKeysDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the IndexKeysDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexKeysDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the IndexKeysDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexKeysDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the IndexKeysDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexKeysDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the IndexKeysDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexKeysDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the IndexKeysDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.MongoUser">
            <summary>
            Represents a MongoDB user.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoUser.#ctor(MongoDB.Driver.MongoCredentials,System.Boolean)">
            <summary>
            Creates a new instance of MongoUser.
            </summary>
            <param name="credentials">The user's credentials.</param>
            <param name="isReadOnly">Whether the user has read-only access.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoUser.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of MongoUser.
            </summary>
            <param name="username">The username.</param>
            <param name="passwordHash">The password hash.</param>
            <param name="isReadOnly">Whether the user has read-only access.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoUser.HashPassword(System.String,System.String)">
            <summary>
            Calculates the password hash.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUser.ToString">
            <summary>
            Returns a string representation of the credentials.
            </summary>
            <returns>A string representation of the user.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoUser.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUser.PasswordHash">
            <summary>
            Gets or sets the password hash.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUser.IsReadOnly">
            <summary>
            Gets or sets whether the user is a read-only user.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.MapReduceOutput">
            <summary>
            Represents the output options of a map/reduce operation.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOutput.op_Implicit(System.String)~MongoDB.Driver.Builders.MapReduceOutput">
            <summary>
            Allows strings to be implicitly used as the name of the output collection.
            </summary>
            <param name="collectionName">The output collection name.</param>
            <returns>A MapReduceOutput.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOutput.Replace(System.String)">
            <summary>
            Gets a MapReduceOutput value that specifies that the output should be stored in a collection (replaces the entire collection).
            </summary>
            <param name="collectionName">The output collection name.</param>
            <returns>A MapReduceOutput.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOutput.Replace(System.String,System.String)">
            <summary>
            Gets a MapReduceOutput value that specifies that the output should be stored in a collection (replaces the entire collection).
            </summary>
            <param name="databaseName">The output database name.</param>
            <param name="collectionName">The output collection name.</param>
            <returns>A MapReduceOutput.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOutput.Merge(System.String)">
            <summary>
            Gets a MapReduceOutput value that specifies that the output should be stored in a collection (adding new values and overwriting existing ones).
            </summary>
            <param name="collectionName">The output collection name.</param>
            <returns>A MapReduceOutput.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOutput.Merge(System.String,System.String)">
            <summary>
            Gets a MapReduceOutput value that specifies that the output should be stored in a collection (adding new values and overwriting existing ones).
            </summary>
            <param name="databaseName">The output database name.</param>
            <param name="collectionName">The output collection name.</param>
            <returns>A MapReduceOutput.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOutput.Reduce(System.String)">
            <summary>
            Gets a MapReduceOutput value that specifies that the output should be stored in a collection (using the reduce function to combine new values with existing values).
            </summary>
            <param name="collectionName">The output collection name.</param>
            <returns>A MapReduceOutput.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOutput.Reduce(System.String,System.String)">
            <summary>
            Gets a MapReduceOutput value that specifies that the output should be stored in a collection (using the reduce function to combine new values with existing values).
            </summary>
            <param name="databaseName">The output database name.</param>
            <param name="collectionName">The output collection name.</param>
            <returns>A MapReduceOutput.</returns>
        </member>
        <member name="P:MongoDB.Driver.Builders.MapReduceOutput.Inline">
            <summary>
            Gets a MapReduceOutput value that specifies that the output should returned inline.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.MapReduceOptions">
            <summary>
            A builder for the options of a Map/Reduce operation.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptions.SetFinalize(MongoDB.Bson.BsonJavaScript)">
            <summary>
            Sets the finalize function.
            </summary>
            <param name="finalize">The finalize function.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptions.SetKeepTemp(System.Boolean)">
            <summary>
            Sets whether to keep the temp collection (obsolete in 1.8.0+).
            </summary>
            <param name="value">Whether to keep the temp collection.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptions.SetLimit(System.Int32)">
            <summary>
            Sets the number of documents to send to the map function (useful in combination with SetSortOrder).
            </summary>
            <param name="value">The number of documents to send to the map function.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptions.SetOutput(MongoDB.Driver.Builders.MapReduceOutput)">
            <summary>
            Sets the output option (see MapReduceOutput).
            </summary>
            <param name="output">The output option.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptions.SetQuery(MongoDB.Driver.IMongoQuery)">
            <summary>
            Sets the optional query that filters which documents are sent to the map function (also useful in combination with SetSortOrder and SetLimit).
            </summary>
            <param name="query">The query.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptions.SetScope(MongoDB.Driver.IMongoScope)">
            <summary>
            Sets a scope that contains variables that can be accessed by the map, reduce and finalize functions.
            </summary>
            <param name="scope">The scope.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptions.SetSortOrder(MongoDB.Driver.IMongoSortBy)">
            <summary>
            Sets the sort order (useful in combination with SetLimit, your map function should not depend on the order the documents are sent to it).
            </summary>
            <param name="sortBy">The sort order.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptions.SetSortOrder(System.String[])">
            <summary>
            Sets the sort order (useful in combination with SetLimit, your map function should not depend on the order the documents are sent to it).
            </summary>
            <param name="keys">The names of the keys to sort by.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptions.SetVerbose(System.Boolean)">
            <summary>
            Sets whether the server should be more verbose when logging map/reduce operations.
            </summary>
            <param name="value">Whether the server should be more verbose.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="P:MongoDB.Driver.Builders.MapReduceOptions.Null">
            <summary>
            Gets a null value with a type of IMongoMapReduceOptions.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.MapReduceOptionsBuilder">
            <summary>
            A builder for the options of a Map/Reduce operation.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.#ctor">
            <summary>
            Initializes a new instance of the MapReduceOptionsBuilder class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.SetFinalize(MongoDB.Bson.BsonJavaScript)">
            <summary>
            Sets the finalize function.
            </summary>
            <param name="finalize">The finalize function.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.SetKeepTemp(System.Boolean)">
            <summary>
            Sets whether to keep the temp collection (obsolete in 1.8.0+).
            </summary>
            <param name="value">Whether to keep the temp collection.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.SetLimit(System.Int32)">
            <summary>
            Sets the number of documents to send to the map function (useful in combination with SetSortOrder).
            </summary>
            <param name="value">The number of documents to send to the map function.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.SetOutput(MongoDB.Driver.Builders.MapReduceOutput)">
            <summary>
            Sets the output option (see MapReduceOutput).
            </summary>
            <param name="output">The output option.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.SetQuery(MongoDB.Driver.IMongoQuery)">
            <summary>
            Sets the optional query that filters which documents are sent to the map function (also useful in combination with SetSortOrder and SetLimit).
            </summary>
            <param name="query">The query.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.SetScope(MongoDB.Driver.IMongoScope)">
            <summary>
            Sets a scope that contains variables that can be accessed by the map, reduce and finalize functions.
            </summary>
            <param name="scope">The scope.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.SetSortOrder(MongoDB.Driver.IMongoSortBy)">
            <summary>
            Sets the sort order (useful in combination with SetLimit, your map function should not depend on the order the documents are sent to it).
            </summary>
            <param name="sortBy">The sort order.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.SetSortOrder(System.String[])">
            <summary>
            Sets the sort order (useful in combination with SetLimit, your map function should not depend on the order the documents are sent to it).
            </summary>
            <param name="keys">The names of the keys to sort by.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.SetVerbose(System.Boolean)">
            <summary>
            Sets whether the server should be more verbose when logging map/reduce operations.
            </summary>
            <param name="value">Whether the server should be more verbose.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.MapReduceOptionsBuilder.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="T:MongoDB.Driver.Builders.GeoNearOptions">
            <summary>
            A builder for the options of the GeoNear command.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.GeoNearOptions.SetDistanceMultiplier(System.Double)">
            <summary>
            Sets the distance multiplier.
            </summary>
            <param name="value">The distance multiplier.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.GeoNearOptions.SetMaxDistance(System.Double)">
            <summary>
            Sets the max distance.
            </summary>
            <param name="value">The max distance.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.GeoNearOptions.SetSpherical(System.Boolean)">
            <summary>
            Sets whether to use a spherical search.
            </summary>
            <param name="value">Whether to use a spherical search.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="P:MongoDB.Driver.Builders.GeoNearOptions.Null">
            <summary>
            Gets a null value with a type of IMongoGeoNearOptions.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.GeoNearOptionsBuilder">
            <summary>
            A builder for the options of the GeoNear command.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.GeoNearOptionsBuilder.#ctor">
            <summary>
            Initializes a new instance of the GeoNearOptionsBuilder class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.GeoNearOptionsBuilder.SetDistanceMultiplier(System.Double)">
            <summary>
            Sets the distance multiplier.
            </summary>
            <param name="value">The distance multiplier.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.GeoNearOptionsBuilder.SetMaxDistance(System.Double)">
            <summary>
            Sets the max distance.
            </summary>
            <param name="value">The max distance.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.GeoNearOptionsBuilder.SetSpherical(System.Boolean)">
            <summary>
            Sets whether to use a spherical search.
            </summary>
            <param name="value">Whether to use a spherical search.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.GeoNearOptionsBuilder.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.GeoNearOptionsBuilder.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="T:MongoDB.Driver.MongoInternalException">
            <summary>
            Represents a MongoDB internal exception (almost surely the result of a bug).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoInternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MongoInternalException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoInternalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MongoInternalException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MongoInternalException class (this overload supports deserialization).
            </summary>
            <param name="info">The SerializationInfo.</param>
            <param name="context">The StreamingContext.</param>
        </member>
        <member name="T:MongoDB.Driver.UpdateDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoUpdate is expected.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.UpdateDocument.#ctor">
            <summary>
            Initializes a new instance of the UpdateDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.UpdateDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UpdateDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.UpdateDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the UpdateDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.UpdateDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the UpdateDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.UpdateDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the UpdateDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.UpdateDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the UpdateDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.UpdateDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the UpdateDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.UpdateDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the UpdateDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.UpdateDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the UpdateDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.UpdateDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the UpdateDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.IndexOptionsDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoIndexOptions is expected.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.IndexOptionsDocument.#ctor">
            <summary>
            Initializes a new instance of the IndexOptionsDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.IndexOptionsDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IndexOptionsDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexOptionsDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the IndexOptionsDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexOptionsDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the IndexOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexOptionsDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the IndexOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexOptionsDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the IndexOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexOptionsDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the IndexOptionsDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexOptionsDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the IndexOptionsDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexOptionsDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the IndexOptionsDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.IndexOptionsDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the IndexOptionsDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.DatabaseStatsResult">
            <summary>
            Represents the result of the database stats command.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.DatabaseStatsResult.#ctor">
            <summary>
            Initializes a new instance of the DatabaseStatsResult class.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.DatabaseStatsResult.AverageObjectSize">
            <summary>
            Gets the average object size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.DatabaseStatsResult.CollectionCount">
            <summary>
            Gets the collection count.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.DatabaseStatsResult.DataSize">
            <summary>
            Gets the data size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.DatabaseStatsResult.ExtentCount">
            <summary>
            Gets the extent count.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.DatabaseStatsResult.FileSize">
            <summary>
            Gets the file size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.DatabaseStatsResult.IndexCount">
            <summary>
            Gets the index count.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.DatabaseStatsResult.IndexSize">
            <summary>
            Gets the index size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.DatabaseStatsResult.ObjectCount">
            <summary>
            Gets the object count.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.DatabaseStatsResult.StorageSize">
            <summary>
            Gets the storage size.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.CollectionOptions">
            <summary>
            A builder for the options used when creating a collection.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptions.SetAutoIndexId(System.Boolean)">
            <summary>
            Sets whether to automatically create an index on the _id element.
            </summary>
            <param name="value">Whether to automatically create an index on the _id element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptions.SetCapped(System.Boolean)">
            <summary>
            Sets whether the collection is capped.
            </summary>
            <param name="value">Whether the collection is capped.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptions.SetMaxDocuments(System.Int32)">
            <summary>
            Sets the max number of documents in a capped collection.
            </summary>
            <param name="value">The max number of documents.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptions.SetMaxSize(System.Int64)">
            <summary>
            Sets the max size of a capped collection.
            </summary>
            <param name="value">The max size.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="P:MongoDB.Driver.Builders.CollectionOptions.Null">
            <summary>
            Gets a null value with a type of IMongoCollectionOptions.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.CollectionOptionsBuilder">
            <summary>
            A builder for the options used when creating a collection.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptionsBuilder.#ctor">
            <summary>
            Initializes a new instance of the CollectionOptionsBuilder class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptionsBuilder.SetAutoIndexId(System.Boolean)">
            <summary>
            Sets whether to automatically create an index on the _id element.
            </summary>
            <param name="value">Whether to automatically create an index on the _id element.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptionsBuilder.SetCapped(System.Boolean)">
            <summary>
            Sets whether the collection is capped.
            </summary>
            <param name="value">Whether the collection is capped.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptionsBuilder.SetMaxDocuments(System.Int32)">
            <summary>
            Sets the max number of documents in a capped collection.
            </summary>
            <param name="value">The max number of documents.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptionsBuilder.SetMaxSize(System.Int64)">
            <summary>
            Sets the max size of a capped collection.
            </summary>
            <param name="value">The max size.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptionsBuilder.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.CollectionOptionsBuilder.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
        <member name="T:MongoDB.Driver.ConnectionMode">
            <summary>
            Server connection mode.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.ConnectionMode.Direct">
            <summary>
            Connect directly to a server.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.ConnectionMode.ReplicaSet">
            <summary>
            Connect to a replica set.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoUrl">
            <summary>
            Represents an immutable URL style connection string. See also MongoUrlBuilder.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoUrl.#ctor(System.String)">
            <summary>
            Creates a new instance of MongoUrl.
            </summary>
            <param name="url">The URL containing the settings.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoUrl.op_Equality(MongoDB.Driver.MongoUrl,MongoDB.Driver.MongoUrl)">
            <summary>
            Compares two MongoUrls.
            </summary>
            <param name="lhs">The first URL.</param>
            <param name="rhs">The other URL.</param>
            <returns>True if the two URLs are equal (or both null).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUrl.op_Inequality(MongoDB.Driver.MongoUrl,MongoDB.Driver.MongoUrl)">
            <summary>
            Compares two MongoUrls.
            </summary>
            <param name="lhs">The first URL.</param>
            <param name="rhs">The other URL.</param>
            <returns>True if the two URLs are not equal (or one is null and the other is not).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUrl.ClearCache">
            <summary>
            Clears the URL cache. When a URL is parsed it is stored in the cache so that it doesn't have to be
            parsed again. There is rarely a need to call this method.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoUrl.Create(System.String)">
            <summary>
            Creates an instance of MongoUrl (might be an existing existence if the same URL has been used before).
            </summary>
            <param name="url">The URL containing the settings.</param>
            <returns>An instance of MongoUrl.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUrl.Equals(MongoDB.Driver.MongoUrl)">
            <summary>
            Compares two MongoUrls.
            </summary>
            <param name="rhs">The other URL.</param>
            <returns>True if the two URLs are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUrl.Equals(System.Object)">
            <summary>
            Compares two MongoUrls.
            </summary>
            <param name="obj">The other URL.</param>
            <returns>True if the two URLs are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUrl.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUrl.ToServerSettings">
            <summary>
            Creates a new instance of MongoServerSettings based on the settings in this MongoUrlBuilder.
            </summary>
            <returns>A new instance of MongoServerSettings.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUrl.ToString">
            <summary>
            Returns the canonical URL based on the settings in this MongoUrlBuilder.
            </summary>
            <returns>The canonical URL.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.ComputedWaitQueueSize">
            <summary>
            Gets the actual wait queue size (either WaitQueueSize or WaitQueueMultiple x MaxConnectionPoolSize).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.ConnectionMode">
            <summary>
            Gets the connection mode.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.ConnectTimeout">
            <summary>
            Gets the connect timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.DatabaseName">
            <summary>
            Gets the optional database name.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.DefaultCredentials">
            <summary>
            Gets the default credentials.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.GuidRepresentation">
            <summary>
            Gets the representation to use for Guids.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.IPv6">
            <summary>
            Gets whether to use IPv6.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.MaxConnectionIdleTime">
            <summary>
            Gets the max connection idle time.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.MaxConnectionLifeTime">
            <summary>
            Gets the max connection life time.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.MaxConnectionPoolSize">
            <summary>
            Gets the max connection pool size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.MinConnectionPoolSize">
            <summary>
            Gets the min connection pool size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.ReplicaSetName">
            <summary>
            Gets the name of the replica set.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.SafeMode">
            <summary>
            Gets the SafeMode to use.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.Server">
            <summary>
            Gets the address of the server (see also Servers if using more than one address).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.Servers">
            <summary>
            Gets the list of server addresses (see also Server if using only one address).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.SlaveOk">
            <summary>
            Gets whether queries should be sent to secondary servers.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.SocketTimeout">
            <summary>
            Gets the socket timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.Url">
            <summary>
            Gets the URL (in canonical form).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.WaitQueueMultiple">
            <summary>
            Gets the wait queue multiple (the actual wait queue size will be WaitQueueMultiple x MaxConnectionPoolSize).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.WaitQueueSize">
            <summary>
            Gets the wait queue size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrl.WaitQueueTimeout">
            <summary>
            Gets the wait queue timeout.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.CommandWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoCommand is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.CommandWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the CommandWrapper class.
            </summary>
            <param name="command">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.CommandWrapper.Create(System.Object)">
            <summary>
            Creates a new instance of the CommandWrapper class.
            </summary>
            <param name="command">The wrapped object.</param>
            <returns>A new instance of CommandWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.ValidateCollectionResult">
            <summary>
            Represents the results of a validate collection command.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.ValidateCollectionResult.#ctor">
            <summary>
            Initializes a new instance of the ValidateCollectionResult class.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.DataSize">
            <summary>
            Gets the data size of the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.DeletedCount">
            <summary>
            Gets the number of documents that have been deleted from the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.DeletedSize">
            <summary>
            Gets the number of documents that have been deleted from the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.Errors">
            <summary>
            Gets the errors returned by validate (or an empty array if there were no errors).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.ExtentCount">
            <summary>
            Gets the number of extents in the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.FirstExtent">
            <summary>
            Gets the first extent of the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.FirstExtentDetails">
            <summary>
            Gets details of the first extent of the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.IndexCount">
            <summary>
            Gets the number of indexes in the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.IsValid">
            <summary>
            Gets whether the collection is valid.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.KeysPerIndex">
            <summary>
            Gets a dictionary containing the number of keys per index.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.LastExtent">
            <summary>
            Gets the last extent of the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.LastExtentSize">
            <summary>
            Gets the size of the last extent of the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.Padding">
            <summary>
            Gets the padding factor of the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.RecordCount">
            <summary>
            Gets the number of records in the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.ResultString">
            <summary>
            Gets the result string.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.Warning">
            <summary>
            Gets any warning returned by the validate command (or null if there is no warning).
            </summary>
        </member>
        <member name="T:MongoDB.Driver.ValidateCollectionResult.ExtentDetails">
            <summary>
            Represents the details of the first extent of the collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.ExtentDetails.Loc">
            <summary>
            Gets the location of the extent.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.ExtentDetails.FirstRecord">
            <summary>
            Gets the location of the first record of the extent.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.ExtentDetails.LastRecord">
            <summary>
            Gets the location of the last record of the extent.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.ExtentDetails.NSDiag">
            <summary>
            Gets the nsdiag value of the extent.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.ExtentDetails.Size">
            <summary>
            Gets the size of the extent.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.ExtentDetails.XNext">
            <summary>
            Gets the next extent.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.ValidateCollectionResult.ExtentDetails.XPrev">
            <summary>
            Gets the prev extent.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.RemoveFlags">
            <summary>
            Flags used with the Remove method of MongoCollection.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.RemoveFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:MongoDB.Driver.RemoveFlags.Single">
            <summary>
            Remove only a single document.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoCredentials">
            <summary>
            Credentials to access a MongoDB database.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoCredentials.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of MongoCredentials.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCredentials.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of MongoCredentials.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="admin">Whether the credentials should be validated against the admin database.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCredentials.Create(System.String,System.String)">
            <summary>
            Creates an instance of MongoCredentials.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>A new instance of MongoCredentials (or null if either parameter is null).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCredentials.op_Equality(MongoDB.Driver.MongoCredentials,MongoDB.Driver.MongoCredentials)">
            <summary>
            Compares two MongoCredentials.
            </summary>
            <param name="lhs">The first credentials.</param>
            <param name="rhs">The other credentials.</param>
            <returns>True if the two credentials are equal (or both null).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCredentials.op_Inequality(MongoDB.Driver.MongoCredentials,MongoDB.Driver.MongoCredentials)">
            <summary>
            Compares two MongoCredentials.
            </summary>
            <param name="lhs">The first credentials.</param>
            <param name="rhs">The other credentials.</param>
            <returns>True if the two credentials are not equal (or one is null and the other is not).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCredentials.Equals(MongoDB.Driver.MongoCredentials,MongoDB.Driver.MongoCredentials)">
            <summary>
            Compares two MongoCredentials.
            </summary>
            <param name="lhs">The first credentials.</param>
            <param name="rhs">The second credentials.</param>
            <returns>True if the two credentials are equal (or both null).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCredentials.Equals(MongoDB.Driver.MongoCredentials)">
            <summary>
            Compares this MongoCredentials to another MongoCredentials.
            </summary>
            <param name="rhs">The other credentials.</param>
            <returns>True if the two credentials are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCredentials.Equals(System.Object)">
            <summary>
            Compares this MongoCredentials to another MongoCredentials.
            </summary>
            <param name="obj">The other credentials.</param>
            <returns>True if the two credentials are equal.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCredentials.GetHashCode">
            <summary>
            Gets the hashcode for the credentials.
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCredentials.ToString">
            <summary>
            Returns a string representation of the credentials.
            </summary>
            <returns>A string representation of the credentials.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoCredentials.Username">
            <summary>
            Gets the username.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCredentials.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCredentials.Admin">
            <summary>
            Gets whether the credentials should be validated against the admin database.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoCollection">
            <summary>
            Represents a MongoDB collection and the settings used to access it. This class is thread-safe.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.#ctor(MongoDB.Driver.MongoDatabase,MongoDB.Driver.MongoCollectionSettings)">
            <summary>
            Protected constructor for abstract base class.
            </summary>
            <param name="database">The database that contains this collection.</param>
            <param name="settings">The settings to use to access this collection.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Count">
            <summary>
            Counts the number of documents in this collection.
            </summary>
            <returns>The number of documents in this collection.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Count(MongoDB.Driver.IMongoQuery)">
            <summary>
            Counts the number of documents in this collection that match a query.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <returns>The number of documents in this collection that match the query.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.CreateIndex(MongoDB.Driver.IMongoIndexKeys,MongoDB.Driver.IMongoIndexOptions)">
            <summary>
            Creates an index for this collection.
            </summary>
            <param name="keys">The indexed fields (usually an IndexKeysDocument or constructed using the IndexKeys builder).</param>
            <param name="options">The index options(usually an IndexOptionsDocument or created using the IndexOption builder).</param>
            <returns>A SafeModeResult.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.CreateIndex(MongoDB.Driver.IMongoIndexKeys)">
            <summary>
            Creates an index for this collection.
            </summary>
            <param name="keys">The indexed fields (usually an IndexKeysDocument or constructed using the IndexKeys builder).</param>
            <returns>A SafeModeResult.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.CreateIndex(System.String[])">
            <summary>
            Creates an index for this collection.
            </summary>
            <param name="keyNames">The names of the indexed fields.</param>
            <returns>A SafeModeResult.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Distinct(System.String)">
            <summary>
            Returns the distinct values for a given field.
            </summary>
            <param name="key">The key of the field.</param>
            <returns>The distint values of the field.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Distinct(System.String,MongoDB.Driver.IMongoQuery)">
            <summary>
            Returns the distinct values for a given field for documents that match a query.
            </summary>
            <param name="key">The key of the field.</param>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <returns>The distint values of the field.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Drop">
            <summary>
            Drops this collection.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.DropAllIndexes">
            <summary>
            Drops all indexes on this collection.
            </summary>
            <returns>A <see cref="T:MongoDB.Driver.CommandResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.DropIndex(MongoDB.Driver.IMongoIndexKeys)">
            <summary>
            Drops an index on this collection.
            </summary>
            <param name="keys">The indexed fields (usually an IndexKeysDocument or constructed using the IndexKeys builder).</param>
            <returns>A <see cref="T:MongoDB.Driver.CommandResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.DropIndex(System.String[])">
            <summary>
            Drops an index on this collection.
            </summary>
            <param name="keyNames">The names of the indexed fields.</param>
            <returns>A <see cref="T:MongoDB.Driver.CommandResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.DropIndexByName(System.String)">
            <summary>
            Drops an index on this collection.
            </summary>
            <param name="indexName">The name of the index.</param>
            <returns>A <see cref="T:MongoDB.Driver.CommandResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.EnsureIndex(MongoDB.Driver.IMongoIndexKeys,MongoDB.Driver.IMongoIndexOptions)">
            <summary>
            Ensures that the desired index exists and creates it if it does not.
            </summary>
            <param name="keys">The indexed fields (usually an IndexKeysDocument or constructed using the IndexKeys builder).</param>
            <param name="options">The index options(usually an IndexOptionsDocument or created using the IndexOption builder).</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.EnsureIndex(MongoDB.Driver.IMongoIndexKeys)">
            <summary>
            Ensures that the desired index exists and creates it if it does not.
            </summary>
            <param name="keys">The indexed fields (usually an IndexKeysDocument or constructed using the IndexKeys builder).</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.EnsureIndex(System.String[])">
            <summary>
            Ensures that the desired index exists and creates it if it does not.
            </summary>
            <param name="keyNames">The names of the indexed fields.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Exists">
            <summary>
            Tests whether this collection exists.
            </summary>
            <returns>True if this collection exists.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindAllAs``1">
            <summary>
            Returns a cursor that can be used to find all documents in this collection as TDocuments.
            </summary>
            <typeparam name="TDocument">The nominal type of the documents.</typeparam>
            <returns>A <see cref="T:MongoDB.Driver.MongoCursor`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindAllAs(System.Type)">
            <summary>
            Returns a cursor that can be used to find all documents in this collection as TDocuments.
            </summary>
            <param name="documentType">The nominal type of the documents.</param>
            <returns>A <see cref="T:MongoDB.Driver.MongoCursor`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindAndModify(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoSortBy,MongoDB.Driver.IMongoUpdate)">
            <summary>
            Finds one matching document using the query and sortBy parameters and applies the specified update to it.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="sortBy">The sort order to select one of the matching documents.</param>
            <param name="update">The update to apply to the matching document.</param>
            <returns>A <see cref="T:MongoDB.Driver.FindAndModifyResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindAndModify(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoSortBy,MongoDB.Driver.IMongoUpdate,System.Boolean)">
            <summary>
            Finds one matching document using the query and sortBy parameters and applies the specified update to it.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="sortBy">The sort order to select one of the matching documents.</param>
            <param name="update">The update to apply to the matching document.</param>
            <param name="returnNew">Whether to return the new or old version of the modified document in the <see cref="T:MongoDB.Driver.FindAndModifyResult"/>.</param>
            <returns>A <see cref="T:MongoDB.Driver.FindAndModifyResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindAndModify(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoSortBy,MongoDB.Driver.IMongoUpdate,System.Boolean,System.Boolean)">
            <summary>
            Finds one matching document using the query and sortBy parameters and applies the specified update to it.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="sortBy">The sort order to select one of the matching documents.</param>
            <param name="update">The update to apply to the matching document.</param>
            <param name="returnNew">Whether to return the new or old version of the modified document in the <see cref="T:MongoDB.Driver.FindAndModifyResult"/>.</param>
            <param name="upsert">Whether to do an upsert if no matching document is found.</param>
            <returns>A <see cref="T:MongoDB.Driver.FindAndModifyResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindAndModify(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoSortBy,MongoDB.Driver.IMongoUpdate,MongoDB.Driver.IMongoFields,System.Boolean,System.Boolean)">
            <summary>
            Finds one matching document using the query and sortBy parameters and applies the specified update to it.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="sortBy">The sort order to select one of the matching documents.</param>
            <param name="update">The update to apply to the matching document.</param>
            <param name="fields">Which fields of the modified document to return in the <see cref="T:MongoDB.Driver.FindAndModifyResult"/>.</param>
            <param name="returnNew">Whether to return the new or old version of the modified document in the <see cref="T:MongoDB.Driver.FindAndModifyResult"/>.</param>
            <param name="upsert">Whether to do an upsert if no matching document is found.</param>
            <returns>A <see cref="T:MongoDB.Driver.FindAndModifyResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindAndRemove(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoSortBy)">
            <summary>
            Finds one matching document using the query and sortBy parameters and removes it from this collection.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="sortBy">The sort order to select one of the matching documents.</param>
            <returns>A <see cref="T:MongoDB.Driver.FindAndModifyResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindAs``1(MongoDB.Driver.IMongoQuery)">
            <summary>
            Returns a cursor that can be used to find all documents in this collection that match the query as TDocuments.
            </summary>
            <typeparam name="TDocument">The type to deserialize the documents as.</typeparam>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <returns>A <see cref="T:MongoDB.Driver.MongoCursor`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindAs(System.Type,MongoDB.Driver.IMongoQuery)">
            <summary>
            Returns a cursor that can be used to find all documents in this collection that match the query as TDocuments.
            </summary>
            <param name="documentType">The nominal type of the documents.</param>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <returns>A <see cref="T:MongoDB.Driver.MongoCursor`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindOneAs``1">
            <summary>
            Returns a cursor that can be used to find one document in this collection as a TDocument.
            </summary>
            <typeparam name="TDocument">The type to deserialize the documents as.</typeparam>
            <returns>A TDocument (or null if not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindOneAs``1(MongoDB.Driver.IMongoQuery)">
            <summary>
            Returns a cursor that can be used to find one document in this collection that matches a query as a TDocument.
            </summary>
            <typeparam name="TDocument">The type to deserialize the documents as.</typeparam>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <returns>A TDocument (or null if not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindOneAs(System.Type)">
            <summary>
            Returns a cursor that can be used to find one document in this collection as a TDocument.
            </summary>
            <param name="documentType">The nominal type of the documents.</param>
            <returns>A document (or null if not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindOneAs(System.Type,MongoDB.Driver.IMongoQuery)">
            <summary>
            Returns a cursor that can be used to find one document in this collection that matches a query as a TDocument.
            </summary>
            <param name="documentType">The type to deserialize the documents as.</param>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <returns>A TDocument (or null if not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindOneByIdAs``1(MongoDB.Bson.BsonValue)">
            <summary>
            Returns a cursor that can be used to find one document in this collection by its _id value as a TDocument.
            </summary>
            <typeparam name="TDocument">The nominal type of the document.</typeparam>
            <param name="id">The id of the document.</param>
            <returns>A TDocument (or null if not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.FindOneByIdAs(System.Type,MongoDB.Bson.BsonValue)">
            <summary>
            Returns a cursor that can be used to find one document in this collection by its _id value as a TDocument.
            </summary>
            <param name="documentType">The nominal type of the document.</param>
            <param name="id">The id of the document.</param>
            <returns>A TDocument (or null if not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.GeoNearAs``1(MongoDB.Driver.IMongoQuery,System.Double,System.Double,System.Int32)">
            <summary>
            Runs a GeoNear command on this collection.
            </summary>
            <typeparam name="TDocument">The type to deserialize the documents as.</typeparam>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="x">The x coordinate of the starting location.</param>
            <param name="y">The y coordinate of the starting location.</param>
            <param name="limit">The maximum number of results returned.</param>
            <returns>A <see cref="T:MongoDB.Driver.GeoNearResult`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.GeoNearAs``1(MongoDB.Driver.IMongoQuery,System.Double,System.Double,System.Int32,MongoDB.Driver.IMongoGeoNearOptions)">
            <summary>
            Runs a GeoNear command on this collection.
            </summary>
            <typeparam name="TDocument">The type to deserialize the documents as.</typeparam>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="x">The x coordinate of the starting location.</param>
            <param name="y">The y coordinate of the starting location.</param>
            <param name="limit">The maximum number of results returned.</param>
            <param name="options">The GeoNear command options (usually a GeoNearOptionsDocument or constructed using the GeoNearOptions builder).</param>
            <returns>A <see cref="T:MongoDB.Driver.GeoNearResult`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.GeoNearAs(System.Type,MongoDB.Driver.IMongoQuery,System.Double,System.Double,System.Int32)">
            <summary>
            Runs a GeoNear command on this collection.
            </summary>
            <param name="documentType">The type to deserialize the documents as.</param>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="x">The x coordinate of the starting location.</param>
            <param name="y">The y coordinate of the starting location.</param>
            <param name="limit">The maximum number of results returned.</param>
            <returns>A <see cref="T:MongoDB.Driver.GeoNearResult`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.GeoNearAs(System.Type,MongoDB.Driver.IMongoQuery,System.Double,System.Double,System.Int32,MongoDB.Driver.IMongoGeoNearOptions)">
            <summary>
            Runs a GeoNear command on this collection.
            </summary>
            <param name="documentType">The type to deserialize the documents as.</param>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="x">The x coordinate of the starting location.</param>
            <param name="y">The y coordinate of the starting location.</param>
            <param name="limit">The maximum number of results returned.</param>
            <param name="options">The GeoNear command options (usually a GeoNearOptionsDocument or constructed using the GeoNearOptions builder).</param>
            <returns>A <see cref="T:MongoDB.Driver.GeoNearResult`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.GetIndexes">
            <summary>
            Gets the indexes for this collection.
            </summary>
            <returns>A list of BsonDocuments that describe the indexes.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.GetStats">
            <summary>
            Gets the stats for this collection.
            </summary>
            <returns>The stats for this collection as a <see cref="T:MongoDB.Driver.CollectionStatsResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.GetTotalDataSize">
            <summary>
            Gets the total data size for this collection (data + indexes).
            </summary>
            <returns>The total data size.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.GetTotalStorageSize">
            <summary>
            Gets the total storage size for this collection (data + indexes + overhead).
            </summary>
            <returns>The total storage size.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Group(MongoDB.Driver.IMongoQuery,MongoDB.Bson.BsonJavaScript,MongoDB.Bson.BsonDocument,MongoDB.Bson.BsonJavaScript,MongoDB.Bson.BsonJavaScript)">
            <summary>
            Runs the group command on this collection.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="keyFunction">A JavaScript function that returns the key value to group on.</param>
            <param name="initial">Initial value passed to the reduce function for each group.</param>
            <param name="reduce">A JavaScript function that is called for each matching document in a group.</param>
            <param name="finalize">A JavaScript function that is called at the end of the group command.</param>
            <returns>A list of results as BsonDocuments.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Group(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoGroupBy,MongoDB.Bson.BsonDocument,MongoDB.Bson.BsonJavaScript,MongoDB.Bson.BsonJavaScript)">
            <summary>
            Runs the group command on this collection.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="keys">The names of the fields to group on.</param>
            <param name="initial">Initial value passed to the reduce function for each group.</param>
            <param name="reduce">A JavaScript function that is called for each matching document in a group.</param>
            <param name="finalize">A JavaScript function that is called at the end of the group command.</param>
            <returns>A list of results as BsonDocuments.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Group(MongoDB.Driver.IMongoQuery,System.String,MongoDB.Bson.BsonDocument,MongoDB.Bson.BsonJavaScript,MongoDB.Bson.BsonJavaScript)">
            <summary>
            Runs the group command on this collection.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="key">The name of the field to group on.</param>
            <param name="initial">Initial value passed to the reduce function for each group.</param>
            <param name="reduce">A JavaScript function that is called for each matching document in a group.</param>
            <param name="finalize">A JavaScript function that is called at the end of the group command.</param>
            <returns>A list of results as BsonDocuments.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.IndexExists(MongoDB.Driver.IMongoIndexKeys)">
            <summary>
            Tests whether an index exists.
            </summary>
            <param name="keys">The indexed fields (usually an IndexKeysDocument or constructed using the IndexKeys builder).</param>
            <returns>True if the index exists.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.IndexExists(System.String[])">
            <summary>
            Tests whether an index exists.
            </summary>
            <param name="keyNames">The names of the fields in the index.</param>
            <returns>True if the index exists.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.IndexExistsByName(System.String)">
            <summary>
            Tests whether an index exists.
            </summary>
            <param name="indexName">The name of the index.</param>
            <returns>True if the index exists.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Insert``1(``0)">
            <summary>
            Inserts a document into this collection (see also InsertBatch to insert multiple documents at once).
            </summary>
            <typeparam name="TNominalType">The nominal type of the document to insert.</typeparam>
            <param name="document">The document to insert.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Insert``1(``0,MongoDB.Driver.SafeMode)">
            <summary>
            Inserts a document into this collection (see also InsertBatch to insert multiple documents at once).
            </summary>
            <typeparam name="TNominalType">The nominal type of the document to insert.</typeparam>
            <param name="document">The document to insert.</param>
            <param name="safeMode">The SafeMode to use for this Insert.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Insert(System.Type,System.Object)">
            <summary>
            Inserts a document into this collection (see also InsertBatch to insert multiple documents at once).
            </summary>
            <param name="nominalType">The nominal type of the document to insert.</param>
            <param name="document">The document to insert.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Insert(System.Type,System.Object,MongoDB.Driver.SafeMode)">
            <summary>
            Inserts a document into this collection (see also InsertBatch to insert multiple documents at once).
            </summary>
            <param name="nominalType">The nominal type of the document to insert.</param>
            <param name="document">The document to insert.</param>
            <param name="safeMode">The SafeMode to use for this Insert.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.InsertBatch``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inserts multiple documents at once into this collection (see also Insert to insert a single document).
            </summary>
            <typeparam name="TNominalType">The type of the documents to insert.</typeparam>
            <param name="documents">The documents to insert.</param>
            <returns>A list of SafeModeResults (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.InsertBatch``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.SafeMode)">
            <summary>
            Inserts multiple documents at once into this collection (see also Insert to insert a single document).
            </summary>
            <typeparam name="TNominalType">The type of the documents to insert.</typeparam>
            <param name="documents">The documents to insert.</param>
            <param name="safeMode">The SafeMode to use for this Insert.</param>
            <returns>A list of SafeModeResults (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.InsertBatch(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Inserts multiple documents at once into this collection (see also Insert to insert a single document).
            </summary>
            <param name="nominalType">The nominal type of the documents to insert.</param>
            <param name="documents">The documents to insert.</param>
            <returns>A list of SafeModeResults (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.InsertBatch(System.Type,System.Collections.Generic.IEnumerable{System.Object},MongoDB.Driver.SafeMode)">
            <summary>
            Inserts multiple documents at once into this collection (see also Insert to insert a single document).
            </summary>
            <param name="nominalType">The nominal type of the documents to insert.</param>
            <param name="documents">The documents to insert.</param>
            <param name="safeMode">The SafeMode to use for this Insert.</param>
            <returns>A list of SafeModeResults (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.IsCapped">
            <summary>
            Tests whether this collection is capped.
            </summary>
            <returns>True if this collection is capped.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.MapReduce(MongoDB.Bson.BsonJavaScript,MongoDB.Bson.BsonJavaScript,MongoDB.Driver.IMongoMapReduceOptions)">
            <summary>
            Runs a Map/Reduce command on this collection.
            </summary>
            <param name="map">A JavaScript function called for each document.</param>
            <param name="reduce">A JavaScript function called on the values emitted by the map function.</param>
            <param name="options">Options for this map/reduce command (see <see cref="T:MongoDB.Driver.MapReduceOptionsDocument"/>, <see cref="T:MongoDB.Driver.Wrappers.MapReduceOptionsWrapper"/> and the <see cref="T:MongoDB.Driver.Builders.MapReduceOptions"/> builder).</param>
            <returns>A <see cref="T:MongoDB.Driver.MapReduceResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.MapReduce(MongoDB.Driver.IMongoQuery,MongoDB.Bson.BsonJavaScript,MongoDB.Bson.BsonJavaScript,MongoDB.Driver.IMongoMapReduceOptions)">
            <summary>
            Runs a Map/Reduce command on document in this collection that match a query.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="map">A JavaScript function called for each document.</param>
            <param name="reduce">A JavaScript function called on the values emitted by the map function.</param>
            <param name="options">Options for this map/reduce command (see <see cref="T:MongoDB.Driver.MapReduceOptionsDocument"/>, <see cref="T:MongoDB.Driver.Wrappers.MapReduceOptionsWrapper"/> and the <see cref="T:MongoDB.Driver.Builders.MapReduceOptions"/> builder).</param>
            <returns>A <see cref="T:MongoDB.Driver.MapReduceResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.MapReduce(MongoDB.Driver.IMongoQuery,MongoDB.Bson.BsonJavaScript,MongoDB.Bson.BsonJavaScript)">
            <summary>
            Runs a Map/Reduce command on document in this collection that match a query.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="map">A JavaScript function called for each document.</param>
            <param name="reduce">A JavaScript function called on the values emitted by the map function.</param>
            <returns>A <see cref="T:MongoDB.Driver.MapReduceResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.MapReduce(MongoDB.Bson.BsonJavaScript,MongoDB.Bson.BsonJavaScript)">
            <summary>
            Runs a Map/Reduce command on this collection.
            </summary>
            <param name="map">A JavaScript function called for each document.</param>
            <param name="reduce">A JavaScript function called on the values emitted by the map function.</param>
            <returns>A <see cref="T:MongoDB.Driver.MapReduceResult"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.ReIndex">
            <summary>
            Runs the ReIndex command on this collection.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Remove(MongoDB.Driver.IMongoQuery)">
            <summary>
            Removes documents from this collection that match a query.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Remove(MongoDB.Driver.IMongoQuery,MongoDB.Driver.SafeMode)">
            <summary>
            Removes documents from this collection that match a query.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="safeMode">The SafeMode to use for this operation.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Remove(MongoDB.Driver.IMongoQuery,MongoDB.Driver.RemoveFlags)">
            <summary>
            Removes documents from this collection that match a query.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="flags">The flags for this Remove (see <see cref="T:MongoDB.Driver.RemoveFlags"/>).</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Remove(MongoDB.Driver.IMongoQuery,MongoDB.Driver.RemoveFlags,MongoDB.Driver.SafeMode)">
            <summary>
            Removes documents from this collection that match a query.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="flags">The flags for this Remove (see <see cref="T:MongoDB.Driver.RemoveFlags"/>).</param>
            <param name="safeMode">The SafeMode to use for this operation.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.RemoveAll">
            <summary>
            Removes all documents from this collection (see also <see cref="M:MongoDB.Driver.MongoCollection.Drop"/>).
            </summary>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.RemoveAll(MongoDB.Driver.SafeMode)">
            <summary>
            Removes all documents from this collection (see also <see cref="M:MongoDB.Driver.MongoCollection.Drop"/>).
            </summary>
            <param name="safeMode">The SafeMode to use for this operation.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.ResetIndexCache">
            <summary>
            Removes all entries for this collection in the index cache used by EnsureIndex. Call this method
            when you know (or suspect) that a process other than this one may have dropped one or
            more indexes.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Save``1(``0)">
            <summary>
            Saves a document to this collection. The document must have an identifiable Id field. Based on the value
            of the Id field Save will perform either an Insert or an Update.
            </summary>
            <typeparam name="TNominalType">The type of the document to save.</typeparam>
            <param name="document">The document to save.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Save``1(``0,MongoDB.Driver.SafeMode)">
            <summary>
            Saves a document to this collection. The document must have an identifiable Id field. Based on the value
            of the Id field Save will perform either an Insert or an Update.
            </summary>
            <typeparam name="TNominalType">The type of the document to save.</typeparam>
            <param name="document">The document to save.</param>
            <param name="safeMode">The SafeMode to use for this operation.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Save(System.Type,System.Object)">
            <summary>
            Saves a document to this collection. The document must have an identifiable Id field. Based on the value
            of the Id field Save will perform either an Insert or an Update.
            </summary>
            <param name="nominalType">The type of the document to save.</param>
            <param name="document">The document to save.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Save(System.Type,System.Object,MongoDB.Driver.SafeMode)">
            <summary>
            Saves a document to this collection. The document must have an identifiable Id field. Based on the value
            of the Id field Save will perform either an Insert or an Update.
            </summary>
            <param name="nominalType">The type of the document to save.</param>
            <param name="document">The document to save.</param>
            <param name="safeMode">The SafeMode to use for this operation.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.ToString">
            <summary>
            Gets a canonical string representation for this database.
            </summary>
            <returns>A canonical string representation for this database.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Update(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoUpdate)">
            <summary>
            Updates one matching document in this collection.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="update">The update to perform on the matching document.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Update(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoUpdate,MongoDB.Driver.SafeMode)">
            <summary>
            Updates one matching document in this collection.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="update">The update to perform on the matching document.</param>
            <param name="safeMode">The SafeMode to use for this operation.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Update(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoUpdate,MongoDB.Driver.UpdateFlags)">
            <summary>
            Updates one or more matching documents in this collection (for multiple updates use UpdateFlags.Multi).
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="update">The update to perform on the matching document.</param>
            <param name="flags">The flags for this Update.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Update(MongoDB.Driver.IMongoQuery,MongoDB.Driver.IMongoUpdate,MongoDB.Driver.UpdateFlags,MongoDB.Driver.SafeMode)">
            <summary>
            Updates one or more matching documents in this collection (for multiple updates use UpdateFlags.Multi).
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="update">The update to perform on the matching document.</param>
            <param name="flags">The flags for this Update.</param>
            <param name="safeMode">The SafeMode to use for this operation.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection.Validate">
            <summary>
            Validates the integrity of this collection.
            </summary>
            <returns>A <see cref="T:MongoDB.Driver.ValidateCollectionResult"/>.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoCollection.Database">
            <summary>
            Gets the database that contains this collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCollection.FullName">
            <summary>
            Gets the fully qualified name of this collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCollection.Name">
            <summary>
            Gets the name of this collection.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoCollection.Settings">
            <summary>
            Gets the settings being used to access this collection.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.MongoCollection`1">
            <summary>
            Represents a MongoDB collection and the settings used to access it as well as a default document type. This class is thread-safe.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection`1.#ctor(MongoDB.Driver.MongoDatabase,MongoDB.Driver.MongoCollectionSettings{`0})">
            <summary>
            Creates a new instance of MongoCollection. Normally you would call one of the indexers or GetCollection methods
            of MongoDatabase instead.
            </summary>
            <param name="database">The database that contains this collection.</param>
            <param name="settings">The settings to use to access this collection.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection`1.Find(MongoDB.Driver.IMongoQuery)">
            <summary>
            Returns a cursor that can be used to find all documents in this collection that match the query as TDefaultDocuments.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <returns>A <see cref="T:MongoDB.Driver.MongoCursor`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection`1.FindAll">
            <summary>
            Returns a cursor that can be used to find all documents in this collection as TDefaultDocuments.
            </summary>
            <returns>A <see cref="T:MongoDB.Driver.MongoCursor`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection`1.FindOne">
            <summary>
            Returns a cursor that can be used to find one document in this collection as a TDefaultDocument.
            </summary>
            <returns>A TDefaultDocument (or null if not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection`1.FindOne(MongoDB.Driver.IMongoQuery)">
            <summary>
            Returns a cursor that can be used to find one document in this collection that matches a query as a TDefaultDocument.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <returns>A TDefaultDocument (or null if not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection`1.FindOneById(MongoDB.Bson.BsonValue)">
            <summary>
            Returns a cursor that can be used to find one document in this collection by its _id value as a TDefaultDocument.
            </summary>
            <param name="id">The id of the document.</param>
            <returns>A TDefaultDocument (or null if not found).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection`1.GeoNear(MongoDB.Driver.IMongoQuery,System.Double,System.Double,System.Int32)">
            <summary>
            Runs a GeoNear command on this collection.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="x">The x coordinate of the starting location.</param>
            <param name="y">The y coordinate of the starting location.</param>
            <param name="limit">The maximum number of results returned.</param>
            <returns>A <see cref="T:MongoDB.Driver.GeoNearResult`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection`1.GeoNear(MongoDB.Driver.IMongoQuery,System.Double,System.Double,System.Int32,MongoDB.Driver.IMongoGeoNearOptions)">
            <summary>
            Runs a GeoNear command on this collection.
            </summary>
            <param name="query">The query (usually a QueryDocument or constructed using the Query builder).</param>
            <param name="x">The x coordinate of the starting location.</param>
            <param name="y">The y coordinate of the starting location.</param>
            <param name="limit">The maximum number of results returned.</param>
            <param name="options">Options for the GeoNear command (see <see cref="T:MongoDB.Driver.GeoNearOptionsDocument"/>, <see cref="T:MongoDB.Driver.Wrappers.GeoNearOptionsWrapper"/>, and the <see cref="T:MongoDB.Driver.Builders.GeoNearOptions"/> builder).</param>
            <returns>A <see cref="T:MongoDB.Driver.GeoNearResult`1"/>.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection`1.Insert(`0)">
            <summary>
            Inserts a document into this collection (see also InsertBatch to insert multiple documents at once).
            </summary>
            <param name="document">The document to insert.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoCollection`1.Insert(`0,MongoDB.Driver.SafeMode)">
            <summary>
            Inserts a document into this collection (see also InsertBatch to insert multiple documents at once).
            </summary>
            <param name="document">The document to insert.</param>
            <param name="safeMode">The SafeMode to use for this Insert.</param>
            <returns>A SafeModeResult (or null if SafeMode is not being used).</returns>
        </member>
        <member name="T:MongoDB.Driver.Wrappers.UpdateWrapper">
            <summary>
            Represents a wrapped object that can be used where an IMongoUpdate is expected (the wrapped object is expected to serialize properly).
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.UpdateWrapper.#ctor(System.Type,System.Object)">
            <summary>
            Initializes a new instance of the UpdateWrapper class.
            </summary>
            <param name="nominalType">The nominal type of the wrapped object.</param>
            <param name="update">The wrapped object.</param>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.UpdateWrapper.Create``1(``0)">
            <summary>
            Creates a new instance of the UpdateWrapper class (this overload is used when the update
            modifier is a replacement document).
            </summary>
            <typeparam name="T">The nominal type of the wrapped object.</typeparam>
            <param name="update">The wrapped object.</param>
            <returns>A new instance of UpdateWrapper or null.</returns>
        </member>
        <member name="M:MongoDB.Driver.Wrappers.UpdateWrapper.Create(System.Type,System.Object)">
            <summary>
            Creates a new instance of the UpdateWrapper class.
            </summary>
            <param name="nominalType">The nominal type of the wrapped object.</param>
            <param name="update">The wrapped object.</param>
            <returns>A new instance of UpdateWrapper or null.</returns>
        </member>
        <member name="T:MongoDB.Driver.GroupByDocument">
            <summary>
            Represents a BSON document that can be used where an IMongoGroupBy is expected.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GroupByDocument.#ctor">
            <summary>
            Initializes a new instance of the GroupByDocument class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.GroupByDocument.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GroupByDocument class specifying whether duplicate element names are allowed
            (allowing duplicate element names is not recommended).
            </summary>
            <param name="allowDuplicateNames">Whether duplicate element names are allowed.</param>
        </member>
        <member name="M:MongoDB.Driver.GroupByDocument.#ctor(MongoDB.Bson.BsonElement)">
            <summary>
            Initializes a new instance of the GroupByDocument class and adds one element.
            </summary>
            <param name="element">An element to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.GroupByDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the GroupByDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.GroupByDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the GroupByDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.GroupByDocument.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the GroupByDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
        </member>
        <member name="M:MongoDB.Driver.GroupByDocument.#ctor(System.Collections.IDictionary,System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the GroupByDocument class and adds new elements from a dictionary of key/value pairs.
            </summary>
            <param name="dictionary">A dictionary to initialize the document from.</param>
            <param name="keys">A list of keys to select values from the dictionary.</param>
        </member>
        <member name="M:MongoDB.Driver.GroupByDocument.#ctor(System.Collections.Generic.IEnumerable{MongoDB.Bson.BsonElement})">
            <summary>
            Initializes a new instance of the GroupByDocument class and adds new elements from a list of elements.
            </summary>
            <param name="elements">A list of elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.GroupByDocument.#ctor(MongoDB.Bson.BsonElement[])">
            <summary>
            Initializes a new instance of the GroupByDocument class and adds one or more elements.
            </summary>
            <param name="elements">One or more elements to add to the document.</param>
        </member>
        <member name="M:MongoDB.Driver.GroupByDocument.#ctor(System.String,MongoDB.Bson.BsonValue)">
            <summary>
            Initializes a new instance of the GroupByDocument class and creates and adds a new element.
            </summary>
            <param name="name">The name of the element to add to the document.</param>
            <param name="value">The value of the element to add to the document.</param>
        </member>
        <member name="T:MongoDB.Driver.MongoUrlBuilder">
            <summary>
            Represents URL style connection strings. This is the recommended connection string style, but see also
            MongoConnectionStringBuilder if you wish to use .NET style connection strings.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoUrlBuilder.#ctor">
            <summary>
            Creates a new instance of MongoUrlBuilder.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.MongoUrlBuilder.#ctor(System.String)">
            <summary>
            Creates a new instance of MongoUrlBuilder.
            </summary>
            <param name="url">The initial settings.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoUrlBuilder.Parse(System.String)">
            <summary>
            Parses a URL and sets all settings to match the URL.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:MongoDB.Driver.MongoUrlBuilder.ToMongoUrl">
            <summary>
            Creates a new instance of MongoUrl based on the settings in this MongoUrlBuilder.
            </summary>
            <returns>A new instance of MongoUrl.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUrlBuilder.ToServerSettings">
            <summary>
            Creates a new instance of MongoServerSettings based on the settings in this MongoUrlBuilder.
            </summary>
            <returns>A new instance of MongoServerSettings.</returns>
        </member>
        <member name="M:MongoDB.Driver.MongoUrlBuilder.ToString">
            <summary>
            Returns the canonical URL based on the settings in this MongoUrlBuilder.
            </summary>
            <returns>The canonical URL.</returns>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.ComputedWaitQueueSize">
            <summary>
            Gets the actual wait queue size (either WaitQueueSize or WaitQueueMultiple x MaxConnectionPoolSize).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.ConnectionMode">
            <summary>
            Gets or sets the connection mode.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.ConnectTimeout">
            <summary>
            Gets or sets the connect timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.DatabaseName">
            <summary>
            Gets or sets the optional database name.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.DefaultCredentials">
            <summary>
            Gets or sets the default credentials.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.GuidRepresentation">
            <summary>
            Gets or sets the representation to use for Guids.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.IPv6">
            <summary>
            Gets or sets whether to use IPv6.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.MaxConnectionIdleTime">
            <summary>
            Gets or sets the max connection idle time.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.MaxConnectionLifeTime">
            <summary>
            Gets or sets the max connection life time.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.MaxConnectionPoolSize">
            <summary>
            Gets or sets the max connection pool size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.MinConnectionPoolSize">
            <summary>
            Gets or sets the min connection pool size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.ReplicaSetName">
            <summary>
            Gets or sets the name of the replica set.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.SafeMode">
            <summary>
            Gets or sets the SafeMode to use.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.Server">
            <summary>
            Gets or sets the address of the server (see also Servers if using more than one address).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.Servers">
            <summary>
            Gets or sets the list of server addresses (see also Server if using only one address).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.SlaveOk">
            <summary>
            Gets or sets whether queries should be sent to secondary servers.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.SocketTimeout">
            <summary>
            Gets or sets the socket timeout.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.WaitQueueMultiple">
            <summary>
            Gets or sets the wait queue multiple (the actual wait queue size will be WaitQueueMultiple x MaxConnectionPoolSize).
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.WaitQueueSize">
            <summary>
            Gets or sets the wait queue size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.MongoUrlBuilder.WaitQueueTimeout">
            <summary>
            Gets or sets the wait queue timeout.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.FindAndModifyResult">
            <summary>
            Represents the result of a FindAndModify command.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.FindAndModifyResult.#ctor">
            <summary>
            Initializes a new instance of the FindAndModifyResult class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.FindAndModifyResult.GetModifiedDocumentAs``1">
            <summary>
            Gets the modified document as a TDocument.
            </summary>
            <typeparam name="TDocument">The nominal type of the modified document.</typeparam>
            <returns>The modified document.</returns>
        </member>
        <member name="M:MongoDB.Driver.FindAndModifyResult.GetModifiedDocumentAs(System.Type)">
            <summary>
            Gets the modified document as a TDocument.
            </summary>
            <param name="documentType">The nominal type of the modified document.</param>
            <returns>The modified document.</returns>
        </member>
        <member name="P:MongoDB.Driver.FindAndModifyResult.ModifiedDocument">
            <summary>
            Gets the modified document.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.CollectionStatsResult">
            <summary>
            Represents the results of the collection stats command.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.CollectionStatsResult.#ctor">
            <summary>
            Initializes a new instance of the CollectionStatsResult class.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.AverageObjectSize">
            <summary>
            Gets the average object size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.DataSize">
            <summary>
            Gets the data size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.ExtentCount">
            <summary>
            Gets the extent count.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.Flags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.IndexCount">
            <summary>
            Gets the index count.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.IndexSizes">
            <summary>
            Gets the index sizes.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.LastExtentSize">
            <summary>
            Gets the last extent size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.Namespace">
            <summary>
            Gets the namespace.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.ObjectCount">
            <summary>
            Gets the object count.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.PaddingFactor">
            <summary>
            Gets the padding factor.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.StorageSize">
            <summary>
            Gets the storage size.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.TotalIndexSize">
            <summary>
            Gets the total index size.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.CollectionStatsResult.IndexSizesResult">
            <summary>
            Represents a collection of index sizes.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.CollectionStatsResult.IndexSizesResult.#ctor(MongoDB.Bson.BsonDocument)">
            <summary>
            Initializes a new instance of the IndexSizesResult class.
            </summary>
            <param name="indexSizes">The index sizes document.</param>
        </member>
        <member name="M:MongoDB.Driver.CollectionStatsResult.IndexSizesResult.ContainsKey(System.String)">
            <summary>
            Tests whether the results contain the size of an index.
            </summary>
            <param name="indexName">The name of the index.</param>
            <returns>True if the results contain the size of the index.</returns>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.IndexSizesResult.Item(System.String)">
            <summary>
            Gets the size of an index.
            </summary>
            <param name="indexName">The name of the index.</param>
            <returns>The size of the index.</returns>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.IndexSizesResult.Count">
            <summary>
            Gets the count of indexes.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.IndexSizesResult.Keys">
            <summary>
            Gets the names of the indexes.
            </summary>
        </member>
        <member name="P:MongoDB.Driver.CollectionStatsResult.IndexSizesResult.Values">
            <summary>
            Gets the sizes of the indexes.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.Fields">
            <summary>
            A builder for specifying which fields of a document the server should return.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.Fields.Exclude(System.String[])">
            <summary>
            Adds one or more field names to be excluded from the results.
            </summary>
            <param name="names">One or more field names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Fields.Include(System.String[])">
            <summary>
            Adds one or more field names to be included in the results.
            </summary>
            <param name="names">One or more field names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Fields.Slice(System.String,System.Int32)">
            <summary>
            Adds a slice to be included in the results.
            </summary>
            <param name="name">The name of the field to slice.</param>
            <param name="size">The size of the slice (negative sizes are taken from the end).</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.Fields.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a slice to be included in the results.
            </summary>
            <param name="name">The name of the field to slice.</param>
            <param name="skip">The number of values to skip.</param>
            <param name="limit">The number of values to extract.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="P:MongoDB.Driver.Builders.Fields.Null">
            <summary>
            Gets a null value with a type of IMongoFields.
            </summary>
        </member>
        <member name="T:MongoDB.Driver.Builders.FieldsBuilder">
            <summary>
            A builder for specifying which fields of a document the server should return.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.FieldsBuilder.#ctor">
            <summary>
            Initializes a new instance of the FieldsBuilder class.
            </summary>
        </member>
        <member name="M:MongoDB.Driver.Builders.FieldsBuilder.Exclude(System.String[])">
            <summary>
            Adds one or more field names to be excluded from the results.
            </summary>
            <param name="names">One or more field names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.FieldsBuilder.Include(System.String[])">
            <summary>
            Adds one or more field names to be included in the results.
            </summary>
            <param name="names">One or more field names.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.FieldsBuilder.Slice(System.String,System.Int32)">
            <summary>
            Adds a slice to be included in the results.
            </summary>
            <param name="name">The name of the field to slice.</param>
            <param name="size">The size of the slice (negative sizes are taken from the end).</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.FieldsBuilder.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a slice to be included in the results.
            </summary>
            <param name="name">The name of the field to slice.</param>
            <param name="skip">The number of values to skip.</param>
            <param name="limit">The number of values to extract.</param>
            <returns>The builder (so method calls can be chained).</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.FieldsBuilder.ToBsonDocument">
            <summary>
            Returns the result of the builder as a BsonDocument.
            </summary>
            <returns>A BsonDocument.</returns>
        </member>
        <member name="M:MongoDB.Driver.Builders.FieldsBuilder.Serialize(MongoDB.Bson.IO.BsonWriter,System.Type,MongoDB.Bson.Serialization.IBsonSerializationOptions)">
            <summary>
            Serializes the result of the builder to a BsonWriter.
            </summary>
            <param name="bsonWriter">The writer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="options">The serialization options.</param>
        </member>
    </members>
</doc>
